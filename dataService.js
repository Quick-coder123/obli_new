// –°–µ—Ä–≤—ñ—Å –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ –¥–∞–Ω–∏–º–∏ (–≤–∏–∫–ª—é—á–Ω–æ Supabase)
class DataService {
    constructor() {
        this.supabaseReady = false;
        this.init();
    }

    async init() {
        try {
            // –ß–µ–∫–∞—î–º–æ –ø–æ–∫–∏ Supabase —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î—Ç—å—Å—è
            await new Promise(resolve => setTimeout(resolve, 300));
            
            // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –¥–æ—Å—Ç—É–ø–Ω—ñ—Å—Ç—å Supabase
            if (!isSupabaseAvailable()) {
                throw new Error('Supabase –Ω–µ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–∏–π');
            }
            
            // –¢–µ—Å—Ç—É—î–º–æ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è
            await supabaseClient.from('cards').select('count');
            this.supabaseReady = true;
            console.log('‚úÖ DataService –≥–æ—Ç–æ–≤–∏–π –∑ Supabase');
            
        } catch (error) {
            console.error('‚ùå –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞: –Ω–µ –≤–¥–∞–ª–æ—Å—è –ø—ñ–¥–∫–ª—é—á–∏—Ç–∏—Å—è –¥–æ Supabase:', error.message);
            this.supabaseReady = false;
            this.showConnectionError();
        }
    }

    showConnectionError() {
        // –ü–æ–∫–∞–∑—É—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É
        const errorDiv = document.createElement('div');
        errorDiv.className = 'fixed top-4 left-1/2 transform -translate-x-1/2 bg-red-500 text-white p-6 rounded-lg shadow-lg z-50 max-w-lg';
        errorDiv.innerHTML = `
            <div class="text-center">
                <span class="text-2xl mb-2 block">‚ùå</span>
                <div>
                    <strong class="block mb-2">–ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ Supabase</strong>
                    <div class="text-sm mb-4">
                        <p>–ú–æ–∂–ª–∏–≤—ñ –ø—Ä–∏—á–∏–Ω–∏:</p>
                        <ul class="text-left mt-2">
                            <li>‚Ä¢ –¢–∞–±–ª–∏—Ü—ñ –Ω–µ —Å—Ç–≤–æ—Ä–µ–Ω—ñ –≤ Supabase</li>
                            <li>‚Ä¢ –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è</li>
                            <li>‚Ä¢ –ü—Ä–æ–±–ª–µ–º–∏ –∑ —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç-–∑'—î–¥–Ω–∞–Ω–Ω—è–º</li>
                        </ul>
                    </div>
                    <div class="text-sm bg-yellow-500 bg-opacity-20 p-3 rounded mb-4">
                        <strong>–†—ñ—à–µ–Ω–Ω—è:</strong><br>
                        –ü–µ—Ä–µ–π–¥—ñ—Ç—å –≤ Supabase SQL Editor —Ç–∞ –≤–∏–∫–æ–Ω–∞–π—Ç–µ –∫–æ–¥ –∑ —Ñ–∞–π–ª—É <code>supabase_tables.sql</code>
                    </div>
                    <button onclick="this.parentElement.parentElement.remove()" class="bg-white text-red-600 px-4 py-2 rounded font-semibold hover:bg-gray-100">
                        –ó–∞–∫—Ä–∏—Ç–∏
                    </button>
                </div>
            </div>
        `;
        document.body.appendChild(errorDiv);
    }

    // –ú–µ—Ç–æ–¥–∏ –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ –∞–∫—Ç–∏–≤–Ω–∏–º–∏ –∫–∞—Ä—Ç–∫–∞–º–∏
    async getCards() {
        if (!this.supabaseReady) {
            console.error('‚ùå Supabase –Ω–µ –≥–æ—Ç–æ–≤–∏–π');
            return [];
        }

        try {
            const { data, error } = await supabaseClient
                .from(SUPABASE_CONFIG.tables.cards)
                .select('*')
                .order('created_at', { ascending: false });
            
            if (error) throw error;
            return this.formatCardsFromSupabase(data || []);
        } catch (error) {
            console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∫–∞—Ä—Ç–æ–∫:', error);
            throw new Error('–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –∫–∞—Ä—Ç–∫–∏ –∑ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö');
        }
    }

    async addCard(cardData) {
        if (!this.supabaseReady) {
            throw new Error('–ë–∞–∑–∞ –¥–∞–Ω–∏—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞');
        }

        console.log('üîÑ –û–±—Ä–æ–±–∫–∞ –¥–∞–Ω–∏—Ö –∫–∞—Ä—Ç–∫–∏:', cardData);

        const card = {
            ...cardData,
            accountStatus: this.calculateAccountStatus(cardData.firstDepositDate),
            createdAt: new Date().toISOString()
        };

        try {
            const supabaseCard = this.formatCardForSupabase(card);
            console.log('üì§ –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –≤ Supabase:', supabaseCard);
            
            const { data, error } = await supabaseClient
                .from(SUPABASE_CONFIG.tables.cards)
                .insert([supabaseCard])
                .select();
            
            if (error) {
                console.error('‚ùå Supabase –ø–æ–º–∏–ª–∫–∞:', error);
                throw error;
            }
            
            console.log('‚úÖ –ö–∞—Ä—Ç–∫—É –¥–æ–¥–∞–Ω–æ —É—Å–ø—ñ—à–Ω–æ:', data[0]);
            return this.formatCardFromSupabase(data[0]);
        } catch (error) {
            console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –∫–∞—Ä—Ç–∫–∏:', error);
            throw new Error(`–ù–µ –≤–¥–∞–ª–æ—Å—è –¥–æ–¥–∞—Ç–∏ –∫–∞—Ä—Ç–∫—É: ${error.message}`);
        }
    }

    async updateCard(cardId, cardData) {
        if (!this.supabaseReady) {
            throw new Error('–ë–∞–∑–∞ –¥–∞–Ω–∏—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞');
        }

        const updatedCard = {
            ...cardData,
            accountStatus: this.calculateAccountStatus(cardData.firstDepositDate),
            updatedAt: new Date().toISOString()
        };

        try {
            const supabaseCard = this.formatCardForSupabase(updatedCard);
            const { data, error } = await supabaseClient
                .from(SUPABASE_CONFIG.tables.cards)
                .update(supabaseCard)
                .eq('id', cardId)
                .select();
            
            if (error) throw error;
            console.log('‚úÖ –ö–∞—Ä—Ç–∫—É –æ–Ω–æ–≤–ª–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ');
            return this.formatCardFromSupabase(data[0]);
        } catch (error) {
            console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –∫–∞—Ä—Ç–∫–∏:', error);
            throw new Error('–ù–µ –≤–¥–∞–ª–æ—Å—è –æ–Ω–æ–≤–∏—Ç–∏ –∫–∞—Ä—Ç–∫—É –≤ –±–∞–∑—ñ –¥–∞–Ω–∏—Ö');
        }
    }

    async deleteCard(cardId) {
        if (!this.supabaseReady) {
            throw new Error('–ë–∞–∑–∞ –¥–∞–Ω–∏—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞');
        }

        try {
            const { error } = await supabaseClient
                .from(SUPABASE_CONFIG.tables.cards)
                .delete()
                .eq('id', cardId);
            
            if (error) throw error;
            console.log('‚úÖ –ö–∞—Ä—Ç–∫—É –≤–∏–¥–∞–ª–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ');
            return true;
        } catch (error) {
            console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è –∫–∞—Ä—Ç–∫–∏:', error);
            throw new Error('–ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–¥–∞–ª–∏—Ç–∏ –∫–∞—Ä—Ç–∫—É –∑ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö');
        }
    }

    async deleteArchivedCard(cardId) {
        if (!this.supabaseReady) {
            throw new Error('–ë–∞–∑–∞ –¥–∞–Ω–∏—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞');
        }

        try {
            const { error } = await supabaseClient
                .from(SUPABASE_CONFIG.tables.archivedCards)
                .delete()
                .eq('id', cardId);
            
            if (error) throw error;
            console.log('‚úÖ –ê—Ä—Ö—ñ–≤–Ω—É –∫–∞—Ä—Ç–∫—É –≤–∏–¥–∞–ª–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ');
            return true;
        } catch (error) {
            console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è –∞—Ä—Ö—ñ–≤–Ω–æ—ó –∫–∞—Ä—Ç–∫–∏:', error);
            throw new Error('–ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–¥–∞–ª–∏—Ç–∏ –∫–∞—Ä—Ç–∫—É –∑ –∞—Ä—Ö—ñ–≤—É');
        }
    }

    async updateArchivedCard(cardId, cardData) {
        if (!this.supabaseReady) {
            throw new Error('–ë–∞–∑–∞ –¥–∞–Ω–∏—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞');
        }

        console.log('üîÑ –û–Ω–æ–≤–ª–µ–Ω–Ω—è –∞—Ä—Ö—ñ–≤–Ω–æ—ó –∫–∞—Ä—Ç–∫–∏:', cardId, cardData);

        const updatedCard = {
            ...cardData,
            accountStatus: this.calculateAccountStatus(cardData.firstDepositDate),
            updatedAt: new Date().toISOString()
        };

        try {
            const supabaseCard = this.formatCardForSupabase(updatedCard);
            console.log('üì§ –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –∞—Ä—Ö—ñ–≤–Ω–æ—ó –∫–∞—Ä—Ç–∫–∏ –≤ Supabase:', supabaseCard);
            
            const { data, error } = await supabaseClient
                .from(SUPABASE_CONFIG.tables.archivedCards)
                .update(supabaseCard)
                .eq('id', cardId)
                .select();
            
            if (error) {
                console.error('‚ùå Supabase –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ –∞—Ä—Ö—ñ–≤–Ω–æ—ó –∫–∞—Ä—Ç–∫–∏:', error);
                throw error;
            }
            
            console.log('‚úÖ –ê—Ä—Ö—ñ–≤–Ω—É –∫–∞—Ä—Ç–∫—É –æ–Ω–æ–≤–ª–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ:', data[0]);
            return this.formatCardFromSupabase(data[0]);
        } catch (error) {
            console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –∞—Ä—Ö—ñ–≤–Ω–æ—ó –∫–∞—Ä—Ç–∫–∏:', error);
            throw new Error(`–ù–µ –≤–¥–∞–ª–æ—Å—è –æ–Ω–æ–≤–∏—Ç–∏ –∞—Ä—Ö—ñ–≤–Ω—É –∫–∞—Ä—Ç–∫—É: ${error.message}`);
        }
    }

    // –ú–µ—Ç–æ–¥–∏ –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ –∞—Ä—Ö—ñ–≤–Ω–∏–º–∏ –∫–∞—Ä—Ç–∫–∞–º–∏
    async getArchivedCards() {
        if (!this.supabaseReady) {
            console.error('‚ùå Supabase –Ω–µ –≥–æ—Ç–æ–≤–∏–π');
            return [];
        }

        try {
            const { data, error } = await supabaseClient
                .from(SUPABASE_CONFIG.tables.archivedCards)
                .select('*')
                .order('archived_at', { ascending: false });
            
            if (error) throw error;
            return this.formatCardsFromSupabase(data || []);
        } catch (error) {
            console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∞—Ä—Ö—ñ–≤–Ω–∏—Ö –∫–∞—Ä—Ç–æ–∫:', error);
            throw new Error('–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –∞—Ä—Ö—ñ–≤–Ω—ñ –∫–∞—Ä—Ç–∫–∏ –∑ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö');
        }
    }

    async moveToArchive(card) {
        if (!this.supabaseReady) {
            throw new Error('–ë–∞–∑–∞ –¥–∞–Ω–∏—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞');
        }

        try {
            // –î–æ–¥–∞—î–º–æ –≤ –∞—Ä—Ö—ñ–≤
            const archivedCard = {
                ...card,
                archivedAt: new Date().toISOString()
            };
            const supabaseArchivedCard = this.formatCardForSupabase(archivedCard);
            
            const { error: insertError } = await supabaseClient
                .from(SUPABASE_CONFIG.tables.archivedCards)
                .insert([supabaseArchivedCard]);
            
            if (insertError) throw insertError;

            // –í–∏–¥–∞–ª—è—î–º–æ –∑ –∞–∫—Ç–∏–≤–Ω–∏—Ö
            const { error: deleteError } = await supabaseClient
                .from(SUPABASE_CONFIG.tables.cards)
                .delete()
                .eq('id', card.id);
            
            if (deleteError) throw deleteError;
            
            console.log('‚úÖ –ö–∞—Ä—Ç–∫—É –ø–µ—Ä–µ–º—ñ—â–µ–Ω–æ –≤ –∞—Ä—Ö—ñ–≤');
            return true;
        } catch (error) {
            console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–º—ñ—â–µ–Ω–Ω—è –≤ –∞—Ä—Ö—ñ–≤:', error);
            throw new Error('–ù–µ –≤–¥–∞–ª–æ—Å—è –ø–µ—Ä–µ–º—ñ—Å—Ç–∏—Ç–∏ –∫–∞—Ä—Ç–∫—É –≤ –∞—Ä—Ö—ñ–≤');
        }
    }

    // –î–æ–ø–æ–º—ñ–∂–Ω—ñ –º–µ—Ç–æ–¥–∏ –¥–ª—è —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö
    formatCardForSupabase(card) {
        const result = {
            full_name: card.fullName,
            ipn: card.ipn,
            organization: card.organization,
            account_open_date: card.accountOpenDate,
            first_deposit_date: card.firstDepositDate || null,
            card_status: this.translateCardStatusToEnglish(card.cardStatus || 'Manufacturing'),
            comment: card.comment || '',
            documents: card.documents || {"contract": card.hasContract || false, "survey": card.hasSurvey || false, "passport": card.hasPassport || false},
            account_status: this.translateAccountStatusToEnglish(card.accountStatus || 'Pending'),
            created_at: card.createdAt,
            updated_at: card.updatedAt || new Date().toISOString()
        };
        
        // –î–æ–¥–∞—î–º–æ ID —Ç—ñ–ª—å–∫–∏ —è–∫—â–æ –≤—ñ–Ω —ñ—Å–Ω—É—î (–¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è)
        if (card.id) {
            result.id = card.id;
        }
        
        // –î–æ–¥–∞—î–º–æ archived_at —Ç—ñ–ª—å–∫–∏ —è–∫—â–æ –≤—ñ–Ω —ñ—Å–Ω—É—î
        if (card.archivedAt) {
            result.archived_at = card.archivedAt;
        }
        
        return result;
    }

    formatCardFromSupabase(supabaseCard) {
        return {
            id: supabaseCard.id,
            fullName: supabaseCard.full_name,
            ipn: supabaseCard.ipn,  
            organization: supabaseCard.organization,
            accountOpenDate: supabaseCard.account_open_date,
            firstDepositDate: supabaseCard.first_deposit_date,
            cardStatus: this.translateCardStatusToUkrainian(supabaseCard.card_status),
            comment: supabaseCard.comment,
            documents: supabaseCard.documents,
            accountStatus: this.translateAccountStatusToUkrainian(supabaseCard.account_status),
            createdAt: supabaseCard.created_at,
            updatedAt: supabaseCard.updated_at,
            archivedAt: supabaseCard.archived_at
        };
    }

    translateCardStatusToEnglish(status) {
        const translations = {
            '–í–∏–≥–æ—Ç–æ–≤–ª—è—î—Ç—å—Å—è': 'Manufacturing',
            '–í—ñ–¥–¥—ñ–ª': 'Department', 
            '–û—Ä–≥–∞–Ω—ñ–∑–∞—Ü—ñ—è': 'Organization',
            '–í–∏–¥–∞–Ω–æ': 'Issued'
        };
        return translations[status] || status;
    }

    translateCardStatusToUkrainian(status) {
        const translations = {
            'Manufacturing': '–í–∏–≥–æ—Ç–æ–≤–ª—è—î—Ç—å—Å—è',
            'Department': '–í—ñ–¥–¥—ñ–ª',
            'Organization': '–û—Ä–≥–∞–Ω—ñ–∑–∞—Ü—ñ—è', 
            'Issued': '–í–∏–¥–∞–Ω–æ'
        };
        return translations[status] || status;
    }

    translateAccountStatusToEnglish(status) {
        const translations = {
            '–û—á—ñ–∫—É—î –∞–∫—Ç–∏–≤–∞—Ü—ñ—é': 'Pending',
            '–ê–∫—Ç–∏–≤–Ω–∏–π': 'Active'
        };
        return translations[status] || status;
    }

    translateAccountStatusToUkrainian(status) {
        const translations = {
            'Pending': '–û—á—ñ–∫—É—î –∞–∫—Ç–∏–≤–∞—Ü—ñ—é',
            'Active': '–ê–∫—Ç–∏–≤–Ω–∏–π'
        };
        return translations[status] || status;
    }

    formatCardsFromSupabase(supabaseCards) {
        return supabaseCards.map(card => this.formatCardFromSupabase(card));
    }

    calculateAccountStatus(firstDepositDate) {
        return firstDepositDate ? '–ê–∫—Ç–∏–≤–Ω–∏–π' : '–û—á—ñ–∫—É—î –∞–∫—Ç–∏–≤–∞—Ü—ñ—é';
    }
}
