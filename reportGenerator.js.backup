// –ì–ª–æ–±–∞–ª—å–Ω–∞ –∑–º—ñ–Ω–Ω–∞ –¥–ª—è —Å–µ—Ä–≤—ñ—Å—É –¥–∞–Ω–∏—Ö
let dataService;

// –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∑–≤—ñ—Ç—ñ–≤ - –ª–æ–≥—ñ–∫–∞ –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–≤—ñ—Ç—ñ–≤ –ø–æ –∫–∞—Ä—Ç–∫–∞—Ö
class ReportGenerator {
    constructor() {
        this.allCards = [];
        this.init();
    }

    async init() {
        try {
            // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ —Å–µ—Ä–≤—ñ—Å –¥–∞–Ω–∏—Ö
            if (!dataService) {
         row.innerHTML = rowHTML;
        tbody.appendChild(row);
    }

    async processActiveAccountsData(year) {
        const organizationData = {};
        
        try {
            console.log('üì• –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –¥–∞–Ω—ñ –∑ –±–∞–∑–∏ –¥–ª—è –∞–∫—Ç–∏–≤–Ω–∏—Ö —Ä–∞—Ö—É–Ω–∫—ñ–≤...');
            
            // –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ —Å–≤—ñ–∂—ñ –¥–∞–Ω—ñ –∑ –∞–∫—Ç–∏–≤–Ω–∏—Ö –∫–∞—Ä—Ç–æ–∫ —Ç–∞ –∞—Ä—Ö—ñ–≤—É
            const activeCards = await dataService.getCards();
            const archivedCards = await dataService.getArchivedCards();
            
            console.log('üìä –ê–∫—Ç–∏–≤–Ω–∏—Ö –∫–∞—Ä—Ç–æ–∫:', activeCards?.length || 0);
            console.log('üìä –ê—Ä—Ö—ñ–≤–Ω–∏—Ö –∫–∞—Ä—Ç–æ–∫:', archivedCards?.length || 0);
            
            // –û–±'—î–¥–Ω—É—î–º–æ –≤—Å—ñ –∫–∞—Ä—Ç–∫–∏
            const allCards = [...(activeCards || []), ...(archivedCards || [])];
            
            console.log(`üîç –û–±—Ä–æ–±–ª—è—î–º–æ ${allCards.length} –∫–∞—Ä—Ç–æ–∫ –¥–ª—è –∞–∫—Ç–∏–≤–Ω–∏—Ö —Ä–∞—Ö—É–Ω–∫—ñ–≤ —É —Ä–æ—Ü—ñ ${year}`);
            
            if (allCards.length > 0) {
                console.log('üìù –ü—Ä–∏–∫–ª–∞–¥ –∫–∞—Ä—Ç–∫–∏ –¥–ª—è –∞–∫—Ç–∏–≤–Ω–∏—Ö —Ä–∞—Ö—É–Ω–∫—ñ–≤:', allCards[0]);
            }
            
            allCards.forEach((card, index) => {
                // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Ä—ñ–∑–Ω—ñ –º–æ–∂–ª–∏–≤—ñ –ø–æ–ª—è –¥–∞—Ç –ø–µ—Ä—à–æ–≥–æ –∑–∞—Ä–∞—Ö—É–≤–∞–Ω–Ω—è
                let depositDate = null;
                
                if (card.firstDepositDate) {
                    depositDate = new Date(card.firstDepositDate);
                } else if (card.first_deposit_date) {
                    depositDate = new Date(card.first_deposit_date);
                } else if (card.dateFirstDeposit) {
                    depositDate = new Date(card.dateFirstDeposit);
                } else if (card.activationDate) {
                    depositDate = new Date(card.activationDate);
                }
                
                if (index < 3) {
                    console.log(`üìÖ –ö–∞—Ä—Ç–∫–∞ ${index + 1} –¥–ª—è –∞–∫—Ç–∏–≤–Ω–∏—Ö —Ä–∞—Ö—É–Ω–∫—ñ–≤:`, {
                        org: card.organization,
                        firstDepositDate: card.firstDepositDate,
                        first_deposit_date: card.first_deposit_date,
                        dateFirstDeposit: card.dateFirstDeposit,
                        activationDate: card.activationDate,
                        parsedDate: depositDate
                    });
                }
                
                // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –¥–∞—Ç–∞ –Ω–∞–ª–µ–∂–∏—Ç—å –¥–æ –≤–∏–±—Ä–∞–Ω–æ–≥–æ —Ä–æ–∫—É
                if (depositDate && !isNaN(depositDate.getTime()) && depositDate.getFullYear() === year) {
                    const month = depositDate.getMonth(); // 0-11
                    const org = card.organization || '–ù–µ–≤—ñ–¥–æ–º–∞ –æ—Ä–≥–∞–Ω—ñ–∑–∞—Ü—ñ—è';
                    
                    // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ –æ—Ä–≥–∞–Ω—ñ–∑–∞—Ü—ñ—é, —è–∫—â–æ —ó—ó —â–µ –Ω–µ–º–∞—î
                    if (!organizationData[org]) {
                        organizationData[org] = Array(12).fill(0);
                    }
                    
                    // –ó–±—ñ–ª—å—à—É—î–º–æ –ª—ñ—á–∏–ª—å–Ω–∏–∫ –¥–ª—è —Ü—å–æ–≥–æ –º—ñ—Å—è—Ü—è
                    organizationData[org][month]++;
                    
                    console.log(`‚úÖ –î–æ–¥–∞–Ω–æ –∞–∫—Ç–∏–≤–Ω–∏–π —Ä–∞—Ö—É–Ω–æ–∫: ${org} - ${depositDate.toLocaleDateString()} (–º—ñ—Å—è—Ü—å ${month + 1})`);
                }
            });
            
            console.log('üéØ –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–æ–±–∫–∏ –∞–∫—Ç–∏–≤–Ω–∏—Ö —Ä–∞—Ö—É–Ω–∫—ñ–≤:', organizationData);
            
        } catch (error) {
            console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –¥–∞–Ω–∏—Ö –∞–∫—Ç–∏–≤–Ω–∏—Ö —Ä–∞—Ö—É–Ω–∫—ñ–≤:', error);
        }
        
        return organizationData;
    }

    addTestActiveRow(tbody, testData) {
        const row = document.createElement('tr');
        row.className = 'hover:bg-gray-50 bg-yellow-50';
        
        let rowHTML = `<td class="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900">${testData.org}</td>`;
        
        // –î–æ–¥–∞—î–º–æ –∫–æ–º—ñ—Ä–∫–∏ –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ –º—ñ—Å—è—Ü—è
        for (let month = 0; month < 12; month++) {
            const count = (month === testData.month) ? testData.count : 0;
            rowHTML += `<td class="px-6 py-4 whitespace-nowrap text-center text-sm text-gray-900">
                ${count > 0 ? count : ''}
            </td>`;
        }
        
        // –î–æ–¥–∞—î–º–æ –∫–æ–ª–æ–Ω–∫—É "–í—Å—å–æ–≥–æ"
        rowHTML += `<td class="px-6 py-4 whitespace-nowrap text-center text-sm font-medium text-gray-900 bg-blue-50">
            ${testData.count}
        </td>`;
        
        row.innerHTML = rowHTML;
        tbody.appendChild(row);
    }

    generateActiveAccountsReport() {          dataService = new DataService();
                await dataService.init();
            }
            
            this.bindEvents();
            await this.loadData();
            this.populateYearFilters();
            this.generateAllReports();
        } catch (error) {
            console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó ReportGenerator:', error);
        }
    }
    
    async loadData() {
        try {
            // –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –∞–∫—Ç–∏–≤–Ω—ñ —Ç–∞ –∞—Ä—Ö—ñ–≤–Ω—ñ –∫–∞—Ä—Ç–∫–∏
            const activeCards = await dataService.getCards();
            const archivedCards = await dataService.getArchivedCards();
            
            // –û–±'—î–¥–Ω—É—î–º–æ –≤—Å—ñ –∫–∞—Ä—Ç–∫–∏
            this.allCards = [...activeCards, ...archivedCards];
            
            console.log('‚úÖ –î–∞–Ω—ñ –¥–ª—è –∑–≤—ñ—Ç—ñ–≤ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ:', this.allCards.length, '–∫–∞—Ä—Ç–æ–∫');
            console.log('–ü—Ä–∏–∫–ª–∞–¥ –∫–∞—Ä—Ç–∫–∏:', this.allCards[0]);
        } catch (error) {
            console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö –¥–ª—è –∑–≤—ñ—Ç—ñ–≤:', error);
            this.allCards = [];
        }
    }

    bindEvents() {
        // –ö–Ω–æ–ø–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –≤—ñ–¥–∫—Ä–∏—Ç–∏—Ö –∫–∞—Ä—Ç–æ–∫
        const refreshBtn = document.getElementById('refreshOpenedCards');
        if (refreshBtn) {
            refreshBtn.addEventListener('click', async () => {
                await this.loadData();
                await this.generateOpenedCardsReport();
            });
        }

        // –ö–Ω–æ–ø–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –∞–∫—Ç–∏–≤–Ω–∏—Ö —Ä–∞—Ö—É–Ω–∫—ñ–≤
        const refreshActiveBtn = document.getElementById('refreshActiveAccounts');
        if (refreshActiveBtn) {
            refreshActiveBtn.addEventListener('click', async () => {
                await this.loadData();
                await this.generateActiveAccountsReport();
            });
        }

        // –§—ñ–ª—å—Ç—Ä–∏ –ø–æ —Ä–æ–∫–∞—Ö
        const openedCardsYearFilter = document.getElementById('openedCardsYear');
        const activeAccountsYearFilter = document.getElementById('activeAccountsYear');
        
        if (openedCardsYearFilter) {
            openedCardsYearFilter.addEventListener('change', async () => {
                await this.generateOpenedCardsReport();
            });
        }
        
        if (activeAccountsYearFilter) {
            activeAccountsYearFilter.addEventListener('change', async () => {
                await this.generateActiveAccountsReport();
            });
        }
    }

    loadCards() {
        const saved = localStorage.getItem('cards');
        return saved ? JSON.parse(saved) : [];
    }

    loadArchivedCards() {
        const saved = localStorage.getItem('archivedCards');
        return saved ? JSON.parse(saved) : [];
    }

    populateYearFilters() {
        const years = this.getAvailableYears();
        const currentYear = new Date().getFullYear();
        
        // –ó–∞–ø–æ–≤–Ω–∏—Ç–∏ —Ñ—ñ–ª—å—Ç—Ä –¥–ª—è –≤—ñ–¥–∫—Ä–∏—Ç–∏—Ö –∫–∞—Ä—Ç–æ–∫
        const openedCardsYearSelect = document.getElementById('openedCardsYear');
        if (openedCardsYearSelect) {
            this.populateYearSelect(openedCardsYearSelect, years, currentYear);
        }
        
        // –ó–∞–ø–æ–≤–Ω–∏—Ç–∏ —Ñ—ñ–ª—å—Ç—Ä –¥–ª—è –∞–∫—Ç–∏–≤–Ω–∏—Ö —Ä–∞—Ö—É–Ω–∫—ñ–≤
        const activeAccountsYearSelect = document.getElementById('activeAccountsYear');
        if (activeAccountsYearSelect) {
            this.populateYearSelect(activeAccountsYearSelect, years, currentYear);
        }
    }

    populateYearSelect(select, years, defaultYear) {
        select.innerHTML = '';
        
        years.forEach(year => {
            const option = document.createElement('option');
            option.value = year;
            option.textContent = year;
            if (year === defaultYear) {
                option.selected = true;
            }
            select.appendChild(option);
        });
    }

    getAvailableYears() {
        const years = new Set();
        
        this.allCards.forEach(card => {
            if (card.accountOpenDate) {
                const year = new Date(card.accountOpenDate).getFullYear();
                years.add(year);
            }
            if (card.firstDepositDate) {
                const year = new Date(card.firstDepositDate).getFullYear();
                years.add(year);
            }
        });
        
        // –î–æ–¥–∞—Ç–∏ –ø–æ—Ç–æ—á–Ω–∏–π —Ä—ñ–∫, —è–∫—â–æ –π–æ–≥–æ –Ω–µ–º–∞—î
        years.add(new Date().getFullYear());
        
        return Array.from(years).sort((a, b) => b - a); // –°–æ—Ä—Ç—É–≤–∞–Ω–Ω—è –ø–æ —Å–ø–∞–¥–∞–Ω–Ω—é
    }

    async generateAllReports() {
        console.log('üöÄ –ì–µ–Ω–µ—Ä—É—î–º–æ –≤—Å—ñ –∑–≤—ñ—Ç–∏...');
        await this.generateOpenedCardsReport();
        this.generateActiveAccountsReport();
        this.generateStatusReport();
    }

    async generateOpenedCardsReport() {
        const selectedYear = parseInt(document.getElementById('openedCardsYear')?.value) || new Date().getFullYear();
        const tbody = document.getElementById('openedCardsTableBody');
        
        if (!tbody) return;

        console.log('üîÑ –ì–µ–Ω–µ—Ä—É—î–º–æ –∑–≤—ñ—Ç –≤—ñ–¥–∫—Ä–∏—Ç–∏—Ö –∫–∞—Ä—Ç–æ–∫ –¥–ª—è —Ä–æ–∫—É:', selectedYear);
        
        // –ó–±–∏—Ä–∞—î–º–æ –¥–∞–Ω—ñ –ø–æ –æ—Ä–≥–∞–Ω—ñ–∑–∞—Ü—ñ—è—Ö —Ç–∞ –º—ñ—Å—è—Ü—è—Ö
        const reportData = await this.processOpenedCardsData(selectedYear);
        const monthTotals = Array(12).fill(0);
        let grandTotal = 0;

        console.log('üìä –î–∞–Ω—ñ –¥–ª—è –∑–≤—ñ—Ç—É:', reportData);

        tbody.innerHTML = '';

        if (Object.keys(reportData).length === 0) {
            console.log('‚ö†Ô∏è –ù–µ–º–∞—î –¥–∞–Ω–∏—Ö –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è. –î–æ–¥–∞—î–º–æ —Ç–µ—Å—Ç–æ–≤—ñ –¥–∞–Ω—ñ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—ó...');
            
            // –î–æ–¥–∞—î–º–æ —Ç–µ—Å—Ç–æ–≤—ñ –¥–∞–Ω—ñ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—ó —Å—Ç—Ä—É–∫—Ç—É—Ä–∏
            const testData = {
                '–°—ñ—á–µ–Ω—å': { org: '–¢–û–í "–ü—Ä–∏–∫–ª–∞–¥"', month: 0, count: 1 },
                '–õ—é—Ç–∏–π': { org: '–§–û–ü –ü–µ—Ç—Ä–µ–Ω–∫–æ', month: 1, count: 1 }
            };
            
            testData['–°—ñ—á–µ–Ω—å'] && this.addTestRow(tbody, testData['–°—ñ—á–µ–Ω—å']);
            testData['–õ—é—Ç–∏–π'] && this.addTestRow(tbody, testData['–õ—é—Ç–∏–π']);
            
            // –ü–æ–∫–∞–∑—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
            const messageRow = document.createElement('tr');
            messageRow.innerHTML = `
                <td colspan="14" class="px-6 py-4 text-center text-yellow-600 bg-yellow-50">
                    –ü–æ–∫–∞–∑–∞–Ω–æ —Ç–µ—Å—Ç–æ–≤—ñ –¥–∞–Ω—ñ. –ù–µ–º–∞—î —Å–ø—Ä–∞–≤–∂–Ω—ñ—Ö –¥–∞–Ω–∏—Ö –∑–∞ ${selectedYear} —Ä—ñ–∫.
                    <br>–î–æ–¥–∞–π—Ç–µ –∫–∞—Ä—Ç–∫–∏ —á–µ—Ä–µ–∑ –≥–æ–ª–æ–≤–Ω—É —Å—Ç–æ—Ä—ñ–Ω–∫—É –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è —Ä–µ–∞–ª—å–Ω–∏—Ö –∑–≤—ñ—Ç—ñ–≤.
                </td>
            `;
            tbody.appendChild(messageRow);
            return;
        }

        // –ì–µ–Ω–µ—Ä—É—î–º–æ —Ä—è–¥–∫–∏ –¥–ª—è –∫–æ–∂–Ω–æ—ó –æ—Ä–≥–∞–Ω—ñ–∑–∞—Ü—ñ—ó
        Object.keys(reportData).sort().forEach(org => {
            const row = document.createElement('tr');
            row.className = 'hover:bg-gray-50';
            
            let rowTotal = 0;
            let rowHTML = `<td class="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900">${org}</td>`;
            
            // –î–æ–¥–∞—î–º–æ –∫–æ–º—ñ—Ä–∫–∏ –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ –º—ñ—Å—è—Ü—è
            for (let month = 0; month < 12; month++) {
                const count = reportData[org][month] || 0;
                rowTotal += count;
                monthTotals[month] += count;
                grandTotal += count;
                
                rowHTML += `<td class="px-6 py-4 whitespace-nowrap text-center text-sm text-gray-900">
                    ${count > 0 ? count : ''}
                </td>`;
            }
            
            // –î–æ–¥–∞—î–º–æ –∫–æ–ª–æ–Ω–∫—É "–í—Å—å–æ–≥–æ" –¥–ª—è –æ—Ä–≥–∞–Ω—ñ–∑–∞—Ü—ñ—ó
            rowHTML += `<td class="px-6 py-4 whitespace-nowrap text-center text-sm font-medium text-gray-900 bg-blue-50">
                ${rowTotal > 0 ? rowTotal : ''}
            </td>`;
            
            row.innerHTML = rowHTML;
            tbody.appendChild(row);
        });

        // –û–Ω–æ–≤–ª—é—î–º–æ –ø—ñ–¥—Å—É–º–∫–∏ –ø–æ –º—ñ—Å—è—Ü—è—Ö —É —Ñ—É—Ç–µ—Ä—ñ
        for (let i = 1; i <= 12; i++) {
            const totalElement = document.getElementById(`monthTotal${i}`);
            if (totalElement) {
                totalElement.textContent = monthTotals[i - 1] > 0 ? monthTotals[i - 1] : '';
            }
        }
        
        // –û–Ω–æ–≤–ª—é—î–º–æ –∑–∞–≥–∞–ª—å–Ω–∏–π –ø—ñ–¥—Å—É–º–æ–∫
        const grandTotalElement = document.getElementById('grandTotal');
        if (grandTotalElement) {
            grandTotalElement.textContent = grandTotal > 0 ? grandTotal : '';
        }
    }

    async processOpenedCardsData(year) {
        const organizationData = {};
        
        try {
            console.log('üì• –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –¥–∞–Ω—ñ –∑ –±–∞–∑–∏...');
            
            // –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ —Å–≤—ñ–∂—ñ –¥–∞–Ω—ñ –∑ –∞–∫—Ç–∏–≤–Ω–∏—Ö –∫–∞—Ä—Ç–æ–∫ —Ç–∞ –∞—Ä—Ö—ñ–≤—É
            const activeCards = await dataService.getCards();
            const archivedCards = await dataService.getArchivedCards();
            
            console.log('üìä –ê–∫—Ç–∏–≤–Ω–∏—Ö –∫–∞—Ä—Ç–æ–∫:', activeCards?.length || 0);
            console.log('üìä –ê—Ä—Ö—ñ–≤–Ω–∏—Ö –∫–∞—Ä—Ç–æ–∫:', archivedCards?.length || 0);
            
            // –û–±'—î–¥–Ω—É—î–º–æ –≤—Å—ñ –∫–∞—Ä—Ç–∫–∏
            const allCards = [...(activeCards || []), ...(archivedCards || [])];
            
            console.log(`üîç –û–±—Ä–æ–±–ª—è—î–º–æ ${allCards.length} –∫–∞—Ä—Ç–æ–∫ –¥–ª—è —Ä–æ–∫—É ${year}`);
            
            if (allCards.length > 0) {
                console.log('üìù –ü—Ä–∏–∫–ª–∞–¥ –∫–∞—Ä—Ç–∫–∏:', allCards[0]);
            }
            
            allCards.forEach((card, index) => {
                // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Ä—ñ–∑–Ω—ñ –º–æ–∂–ª–∏–≤—ñ –ø–æ–ª—è –¥–∞—Ç –≤—ñ–¥–∫—Ä–∏—Ç—Ç—è
                let openDate = null;
                
                if (card.accountOpenDate) {
                    openDate = new Date(card.accountOpenDate);
                } else if (card.account_open_date) {
                    openDate = new Date(card.account_open_date);
                } else if (card.dateOpened) {
                    openDate = new Date(card.dateOpened);
                } else if (card.created_at) {
                    openDate = new Date(card.created_at);
                }
                
                if (index < 3) {
                    console.log(`üìÖ –ö–∞—Ä—Ç–∫–∞ ${index + 1}:`, {
                        org: card.organization,
                        accountOpenDate: card.accountOpenDate,
                        account_open_date: card.account_open_date,
                        dateOpened: card.dateOpened,
                        created_at: card.created_at,
                        parsedDate: openDate
                    });
                }
                
                // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –¥–∞—Ç–∞ –Ω–∞–ª–µ–∂–∏—Ç—å –¥–æ –≤–∏–±—Ä–∞–Ω–æ–≥–æ —Ä–æ–∫—É
                if (openDate && !isNaN(openDate.getTime()) && openDate.getFullYear() === year) {
                    const month = openDate.getMonth(); // 0-11
                    const org = card.organization || '–ù–µ–≤—ñ–¥–æ–º–∞ –æ—Ä–≥–∞–Ω—ñ–∑–∞—Ü—ñ—è';
                    
                    // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ –æ—Ä–≥–∞–Ω—ñ–∑–∞—Ü—ñ—é, —è–∫—â–æ —ó—ó —â–µ –Ω–µ–º–∞—î
                    if (!organizationData[org]) {
                        organizationData[org] = Array(12).fill(0);
                    }
                    
                    // –ó–±—ñ–ª—å—à—É—î–º–æ –ª—ñ—á–∏–ª—å–Ω–∏–∫ –¥–ª—è —Ü—å–æ–≥–æ –º—ñ—Å—è—Ü—è
                    organizationData[org][month]++;
                    
                    console.log(`‚úÖ –î–æ–¥–∞–Ω–æ –∫–∞—Ä—Ç–∫—É: ${org} - ${openDate.toLocaleDateString()} (–º—ñ—Å—è—Ü—å ${month + 1})`);
                }
            });
            
            console.log('üéØ –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–æ–±–∫–∏:', organizationData);
            
        } catch (error) {
            console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –¥–∞–Ω–∏—Ö –≤—ñ–¥–∫—Ä–∏—Ç–∏—Ö –∫–∞—Ä—Ç–æ–∫:', error);
        }
        
        return organizationData;
    }

    addTestRow(tbody, testData) {
        const row = document.createElement('tr');
        row.className = 'hover:bg-gray-50 bg-yellow-50';
        
        let rowHTML = `<td class="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900">${testData.org}</td>`;
        
        // –î–æ–¥–∞—î–º–æ –∫–æ–º—ñ—Ä–∫–∏ –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ –º—ñ—Å—è—Ü—è
        for (let month = 0; month < 12; month++) {
            const count = (month === testData.month) ? testData.count : 0;
            rowHTML += `<td class="px-6 py-4 whitespace-nowrap text-center text-sm text-gray-900">
                ${count > 0 ? count : ''}
            </td>`;
        }
        
        // –î–æ–¥–∞—î–º–æ –∫–æ–ª–æ–Ω–∫—É "–í—Å—å–æ–≥–æ"
        rowHTML += `<td class="px-6 py-4 whitespace-nowrap text-center text-sm font-medium text-gray-900 bg-blue-50">
            ${testData.count}
        </td>`;
        
        row.innerHTML = rowHTML;
        tbody.appendChild(row);
    }

    async generateActiveAccountsReport() {
        const selectedYear = parseInt(document.getElementById('activeAccountsYear')?.value) || new Date().getFullYear();
        const tbody = document.getElementById('activeAccountsTableBody');
        
        if (!tbody) return;

        console.log('üîÑ –ì–µ–Ω–µ—Ä—É—î–º–æ –∑–≤—ñ—Ç –∞–∫—Ç–∏–≤–Ω–∏—Ö —Ä–∞—Ö—É–Ω–∫—ñ–≤ –¥–ª—è —Ä–æ–∫—É:', selectedYear);
        
        // –ó–±–∏—Ä–∞—î–º–æ –¥–∞–Ω—ñ –ø–æ –æ—Ä–≥–∞–Ω—ñ–∑–∞—Ü—ñ—è—Ö —Ç–∞ –º—ñ—Å—è—Ü—è—Ö –¥–ª—è –ø–µ—Ä—à–æ–≥–æ –∑–∞—Ä–∞—Ö—É–≤–∞–Ω–Ω—è
        const reportData = await this.processActiveAccountsData(selectedYear);
        const monthTotals = Array(12).fill(0);
        let grandTotal = 0;

        console.log('üìä –î–∞–Ω—ñ –¥–ª—è –∑–≤—ñ—Ç—É –∞–∫—Ç–∏–≤–Ω–∏—Ö —Ä–∞—Ö—É–Ω–∫—ñ–≤:', reportData);

        tbody.innerHTML = '';

        if (Object.keys(reportData).length === 0) {
            console.log('‚ö†Ô∏è –ù–µ–º–∞—î –¥–∞–Ω–∏—Ö –∞–∫—Ç–∏–≤–Ω–∏—Ö —Ä–∞—Ö—É–Ω–∫—ñ–≤. –î–æ–¥–∞—î–º–æ —Ç–µ—Å—Ç–æ–≤—ñ –¥–∞–Ω—ñ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—ó...');
            
            // –î–æ–¥–∞—î–º–æ —Ç–µ—Å—Ç–æ–≤—ñ –¥–∞–Ω—ñ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—ó —Å—Ç—Ä—É–∫—Ç—É—Ä–∏
            const testData = {
                '–°—ñ—á–µ–Ω—å': { org: '–¢–û–í "–ü—Ä–∏–∫–ª–∞–¥"', month: 0, count: 1 },
                '–ë–µ—Ä–µ–∑–µ–Ω—å': { org: '–§–û–ü –ü–µ—Ç—Ä–µ–Ω–∫–æ', month: 2, count: 1 }
            };
            
            testData['–°—ñ—á–µ–Ω—å'] && this.addTestActiveRow(tbody, testData['–°—ñ—á–µ–Ω—å']);
            testData['–ë–µ—Ä–µ–∑–µ–Ω—å'] && this.addTestActiveRow(tbody, testData['–ë–µ—Ä–µ–∑–µ–Ω—å']);
            
            // –ü–æ–∫–∞–∑—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
            const messageRow = document.createElement('tr');
            messageRow.innerHTML = `
                <td colspan="14" class="px-6 py-4 text-center text-yellow-600 bg-yellow-50">
                    –ü–æ–∫–∞–∑–∞–Ω–æ —Ç–µ—Å—Ç–æ–≤—ñ –¥–∞–Ω—ñ. –ù–µ–º–∞—î —Å–ø—Ä–∞–≤–∂–Ω—ñ—Ö –¥–∞–Ω–∏—Ö –∞–∫—Ç–∏–≤–Ω–∏—Ö —Ä–∞—Ö—É–Ω–∫—ñ–≤ –∑–∞ ${selectedYear} —Ä—ñ–∫.
                    <br>–î–æ–¥–∞–π—Ç–µ –¥–∞—Ç—É –ø–µ—Ä—à–æ–≥–æ –∑–∞—Ä–∞—Ö—É–≤–∞–Ω–Ω—è –¥–æ –∫–∞—Ä—Ç–æ–∫ –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è —Ä–µ–∞–ª—å–Ω–∏—Ö –∑–≤—ñ—Ç—ñ–≤.
                </td>
            `;
            tbody.appendChild(messageRow);
            return;
        }

        // –ì–µ–Ω–µ—Ä—É—î–º–æ —Ä—è–¥–∫–∏ –¥–ª—è –∫–æ–∂–Ω–æ—ó –æ—Ä–≥–∞–Ω—ñ–∑–∞—Ü—ñ—ó
        Object.keys(reportData).sort().forEach(org => {
            const row = document.createElement('tr');
            row.className = 'hover:bg-gray-50';
            
            let rowTotal = 0;
            let rowHTML = `<td class="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900">${org}</td>`;
            
            // –î–æ–¥–∞—î–º–æ –∫–æ–º—ñ—Ä–∫–∏ –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ –º—ñ—Å—è—Ü—è
            for (let month = 0; month < 12; month++) {
                const count = reportData[org][month] || 0;
                rowTotal += count;
                monthTotals[month] += count;
                grandTotal += count;
                
                rowHTML += `<td class="px-6 py-4 whitespace-nowrap text-center text-sm text-gray-900">
                    ${count > 0 ? count : ''}
                </td>`;
            }
            
            // –î–æ–¥–∞—î–º–æ –∫–æ–ª–æ–Ω–∫—É "–í—Å—å–æ–≥–æ" –¥–ª—è –æ—Ä–≥–∞–Ω—ñ–∑–∞—Ü—ñ—ó
            rowHTML += `<td class="px-6 py-4 whitespace-nowrap text-center text-sm font-medium text-gray-900 bg-blue-50">
                ${rowTotal > 0 ? rowTotal : ''}
            </td>`;
            
            row.innerHTML = rowHTML;
            tbody.appendChild(row);
        });

        // –û–Ω–æ–≤–ª—é—î–º–æ –ø—ñ–¥—Å—É–º–∫–∏ –ø–æ –º—ñ—Å—è—Ü—è—Ö —É —Ñ—É—Ç–µ—Ä—ñ
        for (let i = 1; i <= 12; i++) {
            const totalElement = document.getElementById(`activeMonth${i}`);
            if (totalElement) {
                totalElement.textContent = monthTotals[i - 1] > 0 ? monthTotals[i - 1] : '';
            }
        }
        
        // –û–Ω–æ–≤–ª—é—î–º–æ –∑–∞–≥–∞–ª—å–Ω–∏–π –ø—ñ–¥—Å—É–º–æ–∫
        const grandTotalElement = document.getElementById('activeGrandTotal');
        if (grandTotalElement) {
            grandTotalElement.textContent = grandTotal > 0 ? grandTotal : '';
        }
    }

    getActiveAccountsData(year) {
        const monthNames = [
            '–°—ñ—á–µ–Ω—å', '–õ—é—Ç–∏–π', '–ë–µ—Ä–µ–∑–µ–Ω—å', '–ö–≤—ñ—Ç–µ–Ω—å', '–¢—Ä–∞–≤–µ–Ω—å', '–ß–µ—Ä–≤–µ–Ω—å',
            '–õ–∏–ø–µ–Ω—å', '–°–µ—Ä–ø–µ–Ω—å', '–í–µ—Ä–µ—Å–µ–Ω—å', '–ñ–æ–≤—Ç–µ–Ω—å', '–õ–∏—Å—Ç–æ–ø–∞–¥', '–ì—Ä—É–¥–µ–Ω—å'
        ];

        const data = {};
        
        this.allCards
            .filter(card => 
                card.firstDepositDate && 
                new Date(card.firstDepositDate).getFullYear() === year
            )
            .forEach(card => {
                const month = new Date(card.firstDepositDate).getMonth();
                const monthName = monthNames[month];
                const org = card.organization;
                
                const key = `${monthName}-${org}`;
                if (!data[key]) {
                    data[key] = {
                        month: monthName,
                        organization: org,
                        count: 0
                    };
                }
                data[key].count++;
            });

        return Object.values(data).sort((a, b) => {
            const monthA = monthNames.indexOf(a.month);
            const monthB = monthNames.indexOf(b.month);
            if (monthA !== monthB) return monthA - monthB;
            return a.organization.localeCompare(b.organization);
        });
    }

    generateStatusReport() {
        const tbody = document.getElementById('statusTableBody');
        const tfoot = document.getElementById('statusTotal');
        
        if (!tbody) return;

        const reportData = this.getStatusReportData();
        tbody.innerHTML = '';

        if (reportData.length === 0) {
            tbody.innerHTML = `
                <tr>
                    <td colspan="4" class="px-6 py-4 text-center text-gray-500">
                        –ù–µ–º–∞—î –¥–∞–Ω–∏—Ö –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è
                    </td>
                </tr>
            `;
            if (tfoot) tfoot.innerHTML = '';
            return;
        }

        // –°—Ç–≤–æ—Ä–∏—Ç–∏ —Ä—è–¥–∫–∏ —Ç–∞–±–ª–∏—Ü—ñ
        reportData.forEach(item => {
            const row = document.createElement('tr');
            row.className = 'hover:bg-gray-50';
            
            row.innerHTML = `
                <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">${item.organization}</td>
                <td class="px-6 py-4 whitespace-nowrap text-sm font-medium text-green-600">${item.active}</td>
                <td class="px-6 py-4 whitespace-nowrap text-sm font-medium text-yellow-600">${item.pending}</td>
                <td class="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900">${item.total}</td>
            `;
            
            tbody.appendChild(row);
        });

        // –°—Ç–≤–æ—Ä–∏—Ç–∏ –ø—ñ–¥—Å—É–º–∫–æ–≤–∏–π —Ä—è–¥–æ–∫
        if (tfoot) {
            const totalActive = reportData.reduce((sum, item) => sum + item.active, 0);
            const totalPending = reportData.reduce((sum, item) => sum + item.pending, 0);
            const grandTotal = totalActive + totalPending;
            
            tfoot.innerHTML = `
                <tr class="font-medium">
                    <td class="px-6 py-3 text-left text-sm font-medium text-gray-900">–í—Å—å–æ–≥–æ:</td>
                    <td class="px-6 py-3 text-left text-sm font-medium text-green-600">${totalActive}</td>
                    <td class="px-6 py-3 text-left text-sm font-medium text-yellow-600">${totalPending}</td>
                    <td class="px-6 py-3 text-left text-sm font-medium text-gray-900">${grandTotal}</td>
                </tr>
            `;
        }
    }

    getStatusReportData() {
        const data = {};
        
        this.allCards.forEach(card => {
            const org = card.organization;
            
            if (!data[org]) {
                data[org] = {
                    organization: org,
                    active: 0,
                    pending: 0,
                    total: 0
                };
            }
            
            if (card.accountStatus === '–ê–∫—Ç–∏–≤–Ω–∏–π') {
                data[org].active++;
            } else if (card.accountStatus === '–û—á—ñ–∫—É—î –∞–∫—Ç–∏–≤–∞—Ü—ñ—é') {
                data[org].pending++;
            }
            
            data[org].total++;
        });

        return Object.values(data).sort((a, b) => a.organization.localeCompare(b.organization));
    }
}

// –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ —Å—Ç–æ—Ä—ñ–Ω–∫–∏
document.addEventListener('DOMContentLoaded', () => {
    console.log('üöÄ –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è ReportGenerator');
    new ReportGenerator();
});
