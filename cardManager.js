// –ì–ª–æ–±–∞–ª—å–Ω–∞ –∑–º—ñ–Ω–Ω–∞ –¥–ª—è —Å–µ—Ä–≤—ñ—Å—É –¥–∞–Ω–∏—Ö
let dataService;

// –ú–µ–Ω–µ–¥–∂–µ—Ä –∫–∞—Ä—Ç–æ–∫ - –æ—Å–Ω–æ–≤–Ω–∞ –ª–æ–≥—ñ–∫–∞ –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ –∫–∞—Ä—Ç–∫–∞–º–∏
class CardManager {
    constructor() {
        this.cards = [];
        this.archivedCards = [];
        this.editingCardId = null;
        this.init();
    }

    async init() {
        try {
            // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ —Å–µ—Ä–≤—ñ—Å –¥–∞–Ω–∏—Ö
            if (!dataService) {
                dataService = new DataService();
                await dataService.init();
            }
            
            this.bindEvents();
            await this.loadTable();
            await this.populateFilters();
            console.log('‚úÖ CardManager —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ —É—Å–ø—ñ—à–Ω–æ');
        } catch (error) {
            console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó CardManager:', error);
            this.showError('–ü–æ–º–∏–ª–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó —Å–∏—Å—Ç–µ–º–∏');
        }
    }

    showError(message) {
        const errorDiv = document.createElement('div');
        errorDiv.className = 'fixed top-4 right-4 bg-red-500 text-white p-4 rounded-lg shadow-lg z-50';
        errorDiv.innerHTML = `
            <div class="flex items-center">
                <span class="mr-2">‚ùå</span>
                <span>${message}</span>
            </div>
        `;
        document.body.appendChild(errorDiv);
        
        setTimeout(() => {
            if (errorDiv.parentNode) {
                errorDiv.parentNode.removeChild(errorDiv);
            }
        }, 5000);
    }

    showSuccess(message) {
        const successDiv = document.createElement('div');
        successDiv.className = 'fixed top-4 right-4 bg-green-500 text-white p-4 rounded-lg shadow-lg z-50';
        successDiv.innerHTML = `
            <div class="flex items-center">
                <span class="mr-2">‚úÖ</span>
                <span>${message}</span>
            </div>
        `;
        document.body.appendChild(successDiv);
        
        setTimeout(() => {
            if (successDiv.parentNode) {
                successDiv.parentNode.removeChild(successDiv);
            }
        }, 3000);
    }

    bindEvents() {
        // –ö–Ω–æ–ø–∫–∞ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –∫–∞—Ä—Ç–∫–∏
        const addCardBtn = document.getElementById('addCardBtn');
        if (addCardBtn) {
            addCardBtn.addEventListener('click', () => this.showAddModal());
        }

        // –ö–Ω–æ–ø–∫–∞ —ñ–º–ø–æ—Ä—Ç—É Excel
        const importExcelBtn = document.getElementById('importExcelBtn');
        if (importExcelBtn) {
            importExcelBtn.addEventListener('click', () => this.showImportModal());
        }

        // –§–æ—Ä–º–∞ –∫–∞—Ä—Ç–∫–∏
        const cardForm = document.getElementById('cardForm');
        if (cardForm) {
            cardForm.addEventListener('submit', (e) => this.handleFormSubmit(e));
        }

        // –ö–Ω–æ–ø–∫–∞ —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è
        const cancelBtn = document.getElementById('cancelBtn');
        if (cancelBtn) {
            cancelBtn.addEventListener('click', () => this.hideModal());
        }

        // –ó–∞–∫—Ä–∏—Ç—Ç—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –≤—ñ–∫–Ω–∞ –ø—Ä–∏ –∫–ª—ñ–∫—É –Ω–∞ backdrop
        const modal = document.getElementById('cardModal');
        if (modal) {
            modal.addEventListener('click', (e) => {
                if (e.target === modal) {
                    this.hideModal();
                }
            });
        }

        // –ú–æ–¥–∞–ª—å–Ω–µ –≤—ñ–∫–Ω–æ —ñ–º–ø–æ—Ä—Ç—É
        const importModal = document.getElementById('importModal');
        if (importModal) {
            importModal.addEventListener('click', (e) => {
                if (e.target === importModal) {
                    this.hideImportModal();
                }
            });
        }

        // –ö–Ω–æ–ø–∫–∞ —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è —ñ–º–ø–æ—Ä—Ç—É
        const cancelImportBtn = document.getElementById('cancelImportBtn');
        if (cancelImportBtn) {
            cancelImportBtn.addEventListener('click', () => this.hideImportModal());
        }

        // –ö–Ω–æ–ø–∫–∞ –æ–±—Ä–æ–±–∫–∏ —ñ–º–ø–æ—Ä—Ç—É
        const processImportBtn = document.getElementById('processImportBtn');
        if (processImportBtn) {
            processImportBtn.addEventListener('click', () => this.processImport());
        }

        // –ö–Ω–æ–ø–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —à–∞–±–ª–æ–Ω—É
        const downloadTemplateBtn = document.getElementById('downloadTemplateBtn');
        if (downloadTemplateBtn) {
            downloadTemplateBtn.addEventListener('click', () => this.downloadTemplate());
        }

        // –§—ñ–ª—å—Ç—Ä–∏
        const filters = ['filterOrganization', 'filterMonth', 'filterAccountStatus'];
        filters.forEach(filterId => {
            const filter = document.getElementById(filterId);
            if (filter) {
                filter.addEventListener('change', () => this.applyFilters());
            }
        });

        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É —Ä–∞—Ö—É–Ω–∫—É –ø—Ä–∏ –∑–º—ñ–Ω—ñ –¥–∞—Ç–∏
        const firstDepositDate = document.getElementById('firstDepositDate');
        if (firstDepositDate) {
            firstDepositDate.addEventListener('change', () => this.updateAccountStatus());
        }
    }

    async loadCards() {
        try {
            this.cards = await dataService.getCards();
            return this.cards;
        } catch (error) {
            console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∫–∞—Ä—Ç–æ–∫:', error);
            this.showError('–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –∫–∞—Ä—Ç–∫–∏');
            return [];
        }
    }

    async loadArchivedCards() {
        try {
            this.archivedCards = await dataService.getArchivedCards();
            return this.archivedCards;
        } catch (error) {
            console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∞—Ä—Ö—ñ–≤–Ω–∏—Ö –∫–∞—Ä—Ç–æ–∫:', error);
            this.showError('–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –∞—Ä—Ö—ñ–≤–Ω—ñ –∫–∞—Ä—Ç–∫–∏');
            return [];
        }
    }

    generateId() {
        return Date.now().toString() + Math.random().toString(36).substr(2, 9);
    }

    showAddModal() {
        this.editingCardId = null;
        document.getElementById('modalTitle').textContent = '–î–æ–¥–∞—Ç–∏ –∫–∞—Ä—Ç–∫—É';
        this.clearForm();
        this.showModal();
    }

    showEditModal(cardId) {
        this.editingCardId = cardId;
        document.getElementById('modalTitle').textContent = '–†–µ–¥–∞–≥—É–≤–∞—Ç–∏ –∫–∞—Ä—Ç–∫—É';
        this.populateForm(cardId);
        this.showModal();
    }

    showModal() {
        const modal = document.getElementById('cardModal');
        modal.classList.remove('hidden');
        modal.classList.add('modal-backdrop');
        document.body.style.overflow = 'hidden';
    }

    hideModal() {
        const modal = document.getElementById('cardModal');
        modal.classList.add('hidden');
        modal.classList.remove('modal-backdrop');
        document.body.style.overflow = 'auto';
        this.clearForm();
    }

    clearForm() {
        const form = document.getElementById('cardForm');
        form.reset();
    }

    populateForm(cardId) {
        const card = this.cards.find(c => c.id === cardId);
        if (!card) return;

        document.getElementById('fullName').value = card.fullName || '';
        document.getElementById('ipn').value = card.ipn || '';
        document.getElementById('organization').value = card.organization || '';
        document.getElementById('accountOpenDate').value = card.accountOpenDate || '';
        document.getElementById('firstDepositDate').value = card.firstDepositDate || '';
        document.getElementById('cardStatus').value = card.cardStatus || '–í–∏–≥–æ—Ç–æ–≤–ª—è—î—Ç—å—Å—è';
        document.getElementById('comment').value = card.comment || '';

        // –î–æ–∫—É–º–µ–Ω—Ç–∏
        document.getElementById('docContract').checked = card.documents?.contract || false;
        document.getElementById('docSurvey').checked = card.documents?.survey || false;
        document.getElementById('docPassport').checked = card.documents?.passport || false;
    }

    async handleFormSubmit(e) {
        e.preventDefault();
        
        const formData = this.getFormData();
        
        try {
            if (this.editingCardId) {
                await this.updateCard(this.editingCardId, formData);
            } else {
                await this.addCard(formData);
            }
            
            this.hideModal();
            await this.loadTable();
            await this.populateFilters();
        } catch (error) {
            console.error('–ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –∫–∞—Ä—Ç–∫–∏:', error);
            this.showNotification('–ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –∫–∞—Ä—Ç–∫–∏', 'error');
        }
    }

    getFormData() {
        return {
            fullName: document.getElementById('fullName').value,
            ipn: document.getElementById('ipn').value,
            organization: document.getElementById('organization').value,
            accountOpenDate: document.getElementById('accountOpenDate').value,
            firstDepositDate: document.getElementById('firstDepositDate').value,
            cardStatus: document.getElementById('cardStatus').value,
            comment: document.getElementById('comment').value,
            documents: {
                contract: document.getElementById('docContract').checked,
                survey: document.getElementById('docSurvey').checked,
                passport: document.getElementById('docPassport').checked
            }
        };
    }

    async addCard(cardData) {
        try {
            console.log('üîÑ –î–æ–¥–∞–≤–∞–Ω–Ω—è –∫–∞—Ä—Ç–∫–∏:', cardData);
            const card = await dataService.addCard(cardData);
            this.cards.push(card);
            await this.loadTable(); // –ü–µ—Ä–µ–∑–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ —Ç–∞–±–ª–∏—Ü—é
            await this.checkForAutoArchive(card);
            this.showSuccess('–ö–∞—Ä—Ç–∫—É –¥–æ–¥–∞–Ω–æ —É—Å–ø—ñ—à–Ω–æ');
        } catch (error) {
            console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –∫–∞—Ä—Ç–∫–∏:', error);
            this.showError(`–ü–æ–º–∏–ª–∫–∞ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –∫–∞—Ä—Ç–∫–∏: ${error.message}`);
        }
    }

    async updateCard(cardId, cardData) {
        try {
            const updatedCard = await dataService.updateCard(cardId, cardData);
            const cardIndex = this.cards.findIndex(c => c.id === cardId);
            if (cardIndex !== -1) {
                this.cards[cardIndex] = updatedCard;
            }
            await this.checkForAutoArchive(updatedCard);
            this.showNotification('–ö–∞—Ä—Ç–∫—É –æ–Ω–æ–≤–ª–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ', 'success');
        } catch (error) {
            console.error('–ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –∫–∞—Ä—Ç–∫–∏:', error);
            this.showNotification('–ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –∫–∞—Ä—Ç–∫–∏', 'error');
        }
    }

    async deleteCard(cardId) {
        if (confirm('–í–∏ –≤–ø–µ–≤–Ω–µ–Ω—ñ, —â–æ —Ö–æ—á–µ—Ç–µ –≤–∏–¥–∞–ª–∏—Ç–∏ —Ü—é –∫–∞—Ä—Ç–∫—É?')) {
            try {
                await dataService.deleteCard(cardId);
                this.cards = this.cards.filter(c => c.id !== cardId);
                await this.loadTable();
                await this.populateFilters();
                this.showNotification('–ö–∞—Ä—Ç–∫—É –≤–∏–¥–∞–ª–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ', 'success');
            } catch (error) {
                console.error('–ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è –∫–∞—Ä—Ç–∫–∏:', error);
                this.showNotification('–ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è –∫–∞—Ä—Ç–∫–∏', 'error');
            }
        }
    }

    calculateAccountStatus(firstDepositDate) {
        return firstDepositDate ? '–ê–∫—Ç–∏–≤–Ω–∏–π' : '–û—á—ñ–∫—É—î –∞–∫—Ç–∏–≤–∞—Ü—ñ—é';
    }

    updateAccountStatus() {
        const firstDepositDate = document.getElementById('firstDepositDate').value;
        // –¢—É—Ç –º–æ–∂–Ω–∞ –¥–æ–¥–∞—Ç–∏ –≤—ñ–∑—É–∞–ª—å–Ω–µ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É –≤ —Ñ–æ—Ä–º—ñ, —è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ
    }

    async checkForAutoArchive(card) {
        const shouldArchive = 
            card.accountStatus === '–ê–∫—Ç–∏–≤–Ω–∏–π' &&
            card.cardStatus === '–í–∏–¥–∞–Ω–∞' &&
            card.documents?.contract &&
            card.documents?.survey &&
            card.documents?.passport;

        if (shouldArchive) {
            try {
                await dataService.moveToArchive(card);
                this.cards = this.cards.filter(c => c.id !== card.id);
                this.showNotification('–ö–∞—Ä—Ç–∫—É –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –ø–µ—Ä–µ–º—ñ—â–µ–Ω–æ –≤ –∞—Ä—Ö—ñ–≤', 'success');
                await this.loadTable();
                await this.populateFilters();
            } catch (error) {
                console.error('–ü–æ–º–∏–ª–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ–≥–æ –∞—Ä—Ö—ñ–≤—É–≤–∞–Ω–Ω—è:', error);
                this.showNotification('–ü–æ–º–∏–ª–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ–≥–æ –∞—Ä—Ö—ñ–≤—É–≤–∞–Ω–Ω—è', 'error');
            }
        }
    }

    async loadTable() {
        await this.loadCards();
        const tbody = document.getElementById('cardsTableBody');
        if (!tbody) return;

        const filteredCards = this.getFilteredCards();
        tbody.innerHTML = '';

        if (filteredCards.length === 0) {
            tbody.innerHTML = `
                <tr>
                    <td colspan="11" class="px-6 py-4 text-center text-gray-500">
                        –ù–µ–º–∞—î –∫–∞—Ä—Ç–æ–∫ –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è
                    </td>
                </tr>
            `;
            return;
        }

        filteredCards.forEach((card, index) => {
            const row = this.createTableRow(card, index + 1);
            tbody.appendChild(row);
        });
    }

    createTableRow(card, number) {
        const row = document.createElement('tr');
        row.className = 'hover:bg-gray-50';
        
        row.innerHTML = `
            <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">${number}</td>
            <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">${card.fullName}</td>
            <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">${card.ipn}</td>
            <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">${card.organization}</td>
            <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">${this.formatDate(card.accountOpenDate)}</td>
            <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">${this.formatDate(card.firstDepositDate)}</td>
            <td class="px-6 py-4 whitespace-nowrap">
                <span class="status-badge ${card.accountStatus === '–ê–∫—Ç–∏–≤–Ω–∏–π' ? 'status-active' : 'status-pending'}">
                    ${card.accountStatus}
                </span>
            </td>
            <td class="px-6 py-4 whitespace-nowrap">
                <span class="card-status-badge ${this.getCardStatusClass(card.cardStatus)}">
                    ${card.cardStatus}
                </span>
            </td>
            <td class="px-6 py-4 whitespace-nowrap">
                <div class="documents-list">
                    ${this.renderDocuments(card.documents)}
                </div>
            </td>
            <td class="px-6 py-4 text-sm text-gray-900">${card.comment || ''}</td>
            <td class="px-6 py-4 whitespace-nowrap text-sm font-medium">
                <button onclick="cardManager.showEditModal('${card.id}')" class="text-indigo-600 hover:text-indigo-900 mr-2">
                    –†–µ–¥–∞–≥—É–≤–∞—Ç–∏
                </button>
                <button onclick="cardManager.deleteCard('${card.id}')" class="text-red-600 hover:text-red-900">
                    –í–∏–¥–∞–ª–∏—Ç–∏
                </button>
            </td>
        `;
        
        return row;
    }

    getCardStatusClass(status) {
        const statusClasses = {
            '–í–∏–≥–æ—Ç–æ–≤–ª—è—î—Ç—å—Å—è': 'card-status-manufacturing',
            '–ù–∞ –≤—ñ–¥–¥—ñ–ª–µ–Ω–Ω—ñ': 'card-status-office',
            '–ù–∞ –æ—Ä–≥–∞–Ω—ñ–∑–∞—Ü—ñ—ó': 'card-status-organization',
            '–í–∏–¥–∞–Ω–∞': 'card-status-issued'
        };
        return statusClasses[status] || 'card-status-manufacturing';
    }

    renderDocuments(documents) {
        if (!documents) return '';
        
        const docs = [];
        if (documents.contract) docs.push('<span class="document-badge completed">–î–æ–≥–æ–≤—ñ—Ä</span>');
        if (documents.survey) docs.push('<span class="document-badge completed">–û–ø–∏—Ç—É–≤–∞–ª—å–Ω–∏–∫</span>');
        if (documents.passport) docs.push('<span class="document-badge completed">–ü–∞—Å–ø–æ—Ä—Ç</span>');
        
        return docs.join('');
    }

    formatDate(dateString) {
        if (!dateString) return '';
        const date = new Date(dateString);
        return date.toLocaleDateString('uk-UA');
    }

    getFilteredCards() {
        let filtered = [...this.cards];
        
        const orgFilter = document.getElementById('filterOrganization')?.value;
        const monthFilter = document.getElementById('filterMonth')?.value;
        const statusFilter = document.getElementById('filterAccountStatus')?.value;
        
        if (orgFilter) {
            filtered = filtered.filter(card => card.organization === orgFilter);
        }
        
        if (monthFilter) {
            filtered = filtered.filter(card => {
                if (!card.accountOpenDate) return false;
                const cardMonth = new Date(card.accountOpenDate).getMonth() + 1;
                return cardMonth.toString().padStart(2, '0') === monthFilter;
            });
        }
        
        if (statusFilter) {
            filtered = filtered.filter(card => card.accountStatus === statusFilter);
        }
        
        return filtered;
    }

    async populateFilters() {
        await this.populateOrganizationFilter();
    }

    async populateOrganizationFilter() {
        const select = document.getElementById('filterOrganization');
        if (!select) return;

        await this.loadCards();
        const organizations = [...new Set(this.cards.map(card => card.organization))];
        
        // –û—á–∏—Å—Ç–∏—Ç–∏ —ñ—Å–Ω—É—é—á—ñ –æ–ø—Ü—ñ—ó (–∫—Ä—ñ–º –ø–µ—Ä—à–æ—ó)
        while (select.children.length > 1) {
            select.removeChild(select.lastChild);
        }
        
        organizations.forEach(org => {
            const option = document.createElement('option');
            option.value = org;
            option.textContent = org;
            select.appendChild(option);
        });
    }

    async applyFilters() {
        await this.loadTable();
    }

    // –ú–µ—Ç–æ–¥ –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –≤—Å—ñ—Ö –∫–∞—Ä—Ç–æ–∫ (–∞–∫—Ç–∏–≤–Ω–∏—Ö + –∞—Ä—Ö—ñ–≤–Ω–∏—Ö) –¥–ª—è –∑–≤—ñ—Ç—ñ–≤
    async getAllCards() {
        try {
            const activeCards = await dataService.getCards();
            const archivedCards = await dataService.getArchivedCards();
            return [...activeCards, ...archivedCards];
        } catch (error) {
            console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –≤—Å—ñ—Ö –∫–∞—Ä—Ç–æ–∫:', error);
            return [];
        }
    }

    // –ú–µ—Ç–æ–¥ –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Ç—ñ–ª—å–∫–∏ –∞—Ä—Ö—ñ–≤–Ω–∏—Ö –∫–∞—Ä—Ç–æ–∫
    async getArchivedCards() {
        return await dataService.getArchivedCards();
    }

    // –ü–æ–∫–∞–∑–∞—Ç–∏ –º–æ–¥–∞–ª—å–Ω–µ –≤—ñ–∫–Ω–æ —ñ–º–ø–æ—Ä—Ç—É
    showImportModal() {
        const modal = document.getElementById('importModal');
        if (modal) {
            modal.classList.remove('hidden');
            // –û—á–∏—Å—Ç–∏—Ç–∏ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ–π –≤–∏–±—ñ—Ä —Ñ–∞–π–ª—É
            const fileInput = document.getElementById('importFileInput');
            if (fileInput) {
                fileInput.value = '';
            }
        }
    }

    // –ü—Ä–∏—Ö–æ–≤–∞—Ç–∏ –º–æ–¥–∞–ª—å–Ω–µ –≤—ñ–∫–Ω–æ —ñ–º–ø–æ—Ä—Ç—É
    hideImportModal() {
        const modal = document.getElementById('importModal');
        if (modal) {
            modal.classList.add('hidden');
        }
    }

    // –û–±—Ä–æ–±–∫–∞ —ñ–º–ø–æ—Ä—Ç—É
    async processImport() {
        const fileInput = document.getElementById('importFileInput');
        if (!fileInput || !fileInput.files[0]) {
            this.showNotification('‚ùå –û–±–µ—Ä—ñ—Ç—å —Ñ–∞–π–ª –¥–ª—è —ñ–º–ø–æ—Ä—Ç—É', 'error');
            return;
        }

        const file = fileInput.files[0];
        
        try {
            this.showNotification('‚è≥ –û–±—Ä–æ–±–∫–∞ —Ñ–∞–π–ª—É...', 'info');
            
            // –ß–∏—Ç–∞—î–º–æ —Ñ–∞–π–ª
            const data = await this.readExcelFile(file);
            
            if (!data || data.length === 0) {
                this.showNotification('‚ùå –§–∞–π–ª –ø–æ—Ä–æ–∂–Ω—ñ–π –∞–±–æ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç', 'error');
                return;
            }

            // –í–∞–ª—ñ–¥—É—î–º–æ —Ç–∞ —ñ–º–ø–æ—Ä—Ç—É—î–º–æ –¥–∞–Ω—ñ
            const results = await this.importCardsData(data);
            
            // –ü–æ–∫–∞–∑—É—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏
            if (results.success > 0) {
                this.showNotification(`‚úÖ –£—Å–ø—ñ—à–Ω–æ —ñ–º–ø–æ—Ä—Ç–æ–≤–∞–Ω–æ ${results.success} –∫–∞—Ä—Ç–æ–∫`, 'success');
                this.hideImportModal();
                await this.loadTable(); // –û–Ω–æ–≤–ª—é—î–º–æ —Ç–∞–±–ª–∏—Ü—é
            }
            
            if (results.errors > 0) {
                this.showNotification(`‚ö†Ô∏è ${results.errors} –∑–∞–ø–∏—Å—ñ–≤ –º—ñ—Å—Ç–∏–ª–∏ –ø–æ–º–∏–ª–∫–∏`, 'warning');
            }

        } catch (error) {
            console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ —ñ–º–ø–æ—Ä—Ç—É:', error);
            this.showNotification('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —ñ–º–ø–æ—Ä—Ç—ñ —Ñ–∞–π–ª—É', 'error');
        }
    }

    // –ß–∏—Ç–∞–Ω–Ω—è Excel —Ñ–∞–π–ª—É
    async readExcelFile(file) {
        return new Promise((resolve, reject) => {
            const reader = new FileReader();
            
            reader.onload = (e) => {
                try {
                    const data = new Uint8Array(e.target.result);
                    const workbook = XLSX.read(data, { type: 'array' });
                    
                    // –ë–µ—Ä–µ–º–æ –ø–µ—Ä—à–∏–π –∞—Ä–∫—É—à
                    const firstSheetName = workbook.SheetNames[0];
                    const worksheet = workbook.Sheets[firstSheetName];
                    
                    // –ö–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ –≤ JSON
                    const jsonData = XLSX.utils.sheet_to_json(worksheet);
                    resolve(jsonData);
                } catch (error) {
                    reject(error);
                }
            };
            
            reader.onerror = () => reject(new Error('–ü–æ–º–∏–ª–∫–∞ —á–∏—Ç–∞–Ω–Ω—è —Ñ–∞–π–ª—É'));
            reader.readAsArrayBuffer(file);
        });
    }

    // –Ü–º–ø–æ—Ä—Ç –¥–∞–Ω–∏—Ö –∫–∞—Ä—Ç–æ–∫
    async importCardsData(data) {
        let success = 0;
        let errors = 0;
        const errorDetails = [];

        for (const [index, row] of data.entries()) {
            try {
                // –ú–∞–ø—É–≤–∞–Ω–Ω—è –∫–æ–ª–æ–Ω–æ–∫ (–ø—ñ–¥—Ç—Ä–∏–º–∫–∞ —Ä—ñ–∑–Ω–∏—Ö –≤–∞—Ä—ñ–∞–Ω—Ç—ñ–≤ –Ω–∞–∑–≤)
                const cardData = this.mapRowToCard(row);
                
                // –í–∞–ª—ñ–¥–∞—Ü—ñ—è –æ–±–æ–≤'—è–∑–∫–æ–≤–∏—Ö –ø–æ–ª—ñ–≤
                if (!cardData.fullName || !cardData.ipn || !cardData.accountOpenDate) {
                    errors++;
                    errorDetails.push(`–†—è–¥–æ–∫ ${index + 1}: –≤—ñ–¥—Å—É—Ç–Ω—ñ –æ–±–æ–≤'—è–∑–∫–æ–≤—ñ –ø–æ–ª—è (–ü–Ü–ë, –Ü–ü–ù, –î–∞—Ç–∞ –≤—ñ–¥–∫—Ä–∏—Ç—Ç—è)`);
                    continue;
                }

                // –î–æ–¥–∞—Ç–∫–æ–≤–∞ –≤–∞–ª—ñ–¥–∞—Ü—ñ—è –Ü–ü–ù (–º–∞—î –±—É—Ç–∏ 10 —Ü–∏—Ñ—Ä)
                if (cardData.ipn && !/^\d{10}$/.test(cardData.ipn.toString().replace(/\s/g, ''))) {
                    console.warn(`–†—è–¥–æ–∫ ${index + 1}: –Ü–ü–ù –º–∞—î –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç: ${cardData.ipn}`);
                    // –ù–µ –∑—É–ø–∏–Ω—è—î–º–æ —ñ–º–ø–æ—Ä—Ç, –∞–ª–µ –ø–æ–ø–µ—Ä–µ–¥–∂–∞—î–º–æ
                }

                console.log(`–Ü–º–ø–æ—Ä—Ç —Ä—è–¥–∫–∞ ${index + 1}:`, cardData);

                // –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –≤ –±–∞–∑—É –¥–∞–Ω–∏—Ö
                await dataService.addCard(cardData);
                success++;

            } catch (error) {
                console.error(`–ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Ä—è–¥–∫–∞ ${index + 1}:`, error);
                errors++;
                errorDetails.push(`–†—è–¥–æ–∫ ${index + 1}: ${error.message}`);
            }
        }

        // –ü–æ–∫–∞–∑—É—î–º–æ –¥–µ—Ç–∞–ª—å–Ω—ñ –ø–æ–º–∏–ª–∫–∏ —è–∫—â–æ —ó—Ö –Ω–µ–±–∞–≥–∞—Ç–æ
        if (errorDetails.length > 0 && errorDetails.length <= 5) {
            console.warn('–î–µ—Ç–∞–ª—ñ –ø–æ–º–∏–ª–æ–∫ —ñ–º–ø–æ—Ä—Ç—É:', errorDetails);
        }

        return { success, errors, errorDetails };
    }

    // –ú–∞–ø—É–≤–∞–Ω–Ω—è —Ä—è–¥–∫–∞ Excel –Ω–∞ –æ–±'—î–∫—Ç –∫–∞—Ä—Ç–∫–∏
    mapRowToCard(row) {
        // –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–æ—à—É–∫—É –∑–Ω–∞—á–µ–Ω–Ω—è –ø–æ —Ä—ñ–∑–Ω–∏–º –≤–∞—Ä—ñ–∞–Ω—Ç–∞–º –Ω–∞–∑–≤ –∫–æ–ª–æ–Ω–æ–∫
        const findValue = (possibleNames) => {
            for (const name of possibleNames) {
                if (row[name] !== undefined && row[name] !== null && row[name] !== '') {
                    return row[name];
                }
            }
            return '';
        };

        // –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —á–∏ —î –∑–Ω–∞—á–µ–Ω–Ω—è "–¢–ê–ö"
        const isYes = (value) => {
            if (!value) return false;
            const normalizedValue = value.toString().toUpperCase().trim();
            return normalizedValue === '–¢–ê–ö' || 
                   normalizedValue === 'YES' || 
                   normalizedValue === '–î–ê' || 
                   normalizedValue === 'TRUE' || 
                   normalizedValue === '1' ||
                   normalizedValue === '+';
        };

        return {
            fullName: findValue(['–ü–Ü–ë', 'PIB', 'Full Name', 'Name', '–ò–º—è']),
            ipn: findValue(['–Ü–ü–ù', 'IPN', 'Tax ID', '–ò–ù–ù']),
            organization: findValue(['–û—Ä–≥–∞–Ω—ñ–∑–∞—Ü—ñ—è', 'Organization', '–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è', 'Company']) || '',
            accountOpenDate: this.parseDate(findValue(['–î–∞—Ç–∞ –≤—ñ–¥–∫—Ä–∏—Ç—Ç—è', 'Open Date', '–î–∞—Ç–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è', 'Date'])),
            firstDepositDate: this.parseDate(findValue(['–î–∞—Ç–∞ 1-–≥–æ –∑–∞—Ä–∞—Ö—É–≤–∞–Ω–Ω—è', '–î–∞—Ç–∞ 1-–≥–æ –∑–∞—Ä–∞—Ö.', 'First Credit Date', '–î–∞—Ç–∞ –ø–µ—Ä–≤–æ–≥–æ –∑–∞—á.', 'Credit Date'])),
            accountStatus: '–û—á—ñ–∫—É—î –∞–∫—Ç–∏–≤–∞—Ü—ñ—é', // –ó–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º
            comment: findValue(['–ö–æ–º–µ–Ω—Ç–∞—Ä', 'Comment', '–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π', 'Notes']) || '',
            hasPassport: isYes(findValue(['–ü–∞—Å–ø–æ—Ä—Ç', 'Passport', '–ü–∞—Å–ø–æ—Ä—Ç'])),
            hasSurvey: isYes(findValue(['–û–ø–∏—Ç—É–≤–∞–ª—å–Ω–∏–∫', 'Survey', '–û–ø—Ä–æ—Å–Ω–∏–∫', '–ê–Ω–∫–µ—Ç–∞'])),
            hasContract: isYes(findValue(['–î–æ–≥–æ–≤—ñ—Ä', 'Contract', '–î–æ–≥–æ–≤–æ—Ä'])),
            cardStatus: 'Manufacturing'
        };
    }

    // –ü–∞—Ä—Å–∏–Ω–≥ –¥–∞—Ç–∏ –∑ —Ä—ñ–∑–Ω–∏—Ö —Ñ–æ—Ä–º–∞—Ç—ñ–≤
    parseDate(dateValue) {
        if (!dateValue) return null;
        
        // –Ø–∫—â–æ —Ü–µ –≤–∂–µ Date –æ–±'—î–∫—Ç
        if (dateValue instanceof Date) {
            return dateValue.toISOString().split('T')[0];
        }
        
        // –Ø–∫—â–æ —Ü–µ —Ä—è–¥–æ–∫
        if (typeof dateValue === 'string') {
            dateValue = dateValue.trim();
            if (!dateValue) return null;
            
            // –°–ø—Ä–æ–±–∞ –ø–∞—Ä—Å–∏—Ç–∏ —Ä—ñ–∑–Ω—ñ —Ñ–æ—Ä–º–∞—Ç–∏
            const formats = [
                /^\d{4}-\d{2}-\d{2}$/, // YYYY-MM-DD
                /^\d{2}\/\d{2}\/\d{4}$/, // DD/MM/YYYY
                /^\d{2}\.\d{2}\.\d{4}$/, // DD.MM.YYYY
            ];
            
            // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç—ñ–≤
            if (formats[0].test(dateValue)) {
                // YYYY-MM-DD - –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —è–∫ —î
                const date = new Date(dateValue + 'T00:00:00');
                if (!isNaN(date.getTime())) {
                    return dateValue;
                }
            } else if (formats[1].test(dateValue)) {
                // DD/MM/YYYY
                const parts = dateValue.split('/');
                const isoDate = `${parts[2]}-${parts[1].padStart(2, '0')}-${parts[0].padStart(2, '0')}`;
                const date = new Date(isoDate + 'T00:00:00');
                if (!isNaN(date.getTime())) {
                    return isoDate;
                }
            } else if (formats[2].test(dateValue)) {
                // DD.MM.YYYY
                const parts = dateValue.split('.');
                const isoDate = `${parts[2]}-${parts[1].padStart(2, '0')}-${parts[0].padStart(2, '0')}`;
                const date = new Date(isoDate + 'T00:00:00');
                if (!isNaN(date.getTime())) {
                    return isoDate;
                }
            }
            
            // –°–ø—Ä–æ–±–∞ —á–µ—Ä–µ–∑ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏–π –ø–∞—Ä—Å–µ—Ä
            const date = new Date(dateValue);
            if (!isNaN(date.getTime())) {
                return date.toISOString().split('T')[0];
            }
        }
        
        // –Ø–∫—â–æ —Ü–µ —á–∏—Å–ª–æ (Excel serial date)
        if (typeof dateValue === 'number') {
            const date = new Date((dateValue - 25569) * 86400 * 1000);
            if (!isNaN(date.getTime())) {
                return date.toISOString().split('T')[0];
            }
        }
        
        console.warn('–ù–µ –≤–¥–∞–ª–æ—Å—è –ø–∞—Ä—Å–∏—Ç–∏ –¥–∞—Ç—É:', dateValue);
        return null;
    }

    // –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —à–∞–±–ª–æ–Ω—É Excel
    downloadTemplate() {
        try {
            // –°—Ç–≤–æ—Ä—é—î–º–æ –ø—Ä–∏–∫–ª–∞–¥ –¥–∞–Ω–∏—Ö –¥–ª—è —à–∞–±–ª–æ–Ω—É
            const templateData = [
                {
                    '–ü–Ü–ë': '–Ü–≤–∞–Ω–æ–≤ –Ü–≤–∞–Ω –Ü–≤–∞–Ω–æ–≤–∏—á',
                    '–Ü–ü–ù': '1234567890',
                    '–û—Ä–≥–∞–Ω—ñ–∑–∞—Ü—ñ—è': '–¢–û–í "–ü—Ä–∏–∫–ª–∞–¥"',
                    '–î–∞—Ç–∞ –≤—ñ–¥–∫—Ä–∏—Ç—Ç—è': '2024-01-15',
                    '–î–∞—Ç–∞ 1-–≥–æ –∑–∞—Ä–∞—Ö—É–≤–∞–Ω–Ω—è': '2024-01-20',
                    '–ü–∞—Å–ø–æ—Ä—Ç': '–¢–ê–ö',
                    '–û–ø–∏—Ç—É–≤–∞–ª—å–Ω–∏–∫': '–¢–ê–ö',
                    '–î–æ–≥–æ–≤—ñ—Ä': '–ù–Ü'
                },
                {
                    '–ü–Ü–ë': '–ü–µ—Ç—Ä–µ–Ω–∫–æ –ú–∞—Ä—ñ—è –û–ª–µ–∫—Å–∞–Ω–¥—Ä—ñ–≤–Ω–∞',
                    '–Ü–ü–ù': '0987654321',
                    '–û—Ä–≥–∞–Ω—ñ–∑–∞—Ü—ñ—è': '–§–û–ü –ü–µ—Ç—Ä–µ–Ω–∫–æ',
                    '–î–∞—Ç–∞ –≤—ñ–¥–∫—Ä–∏—Ç—Ç—è': '2024-01-16',
                    '–î–∞—Ç–∞ 1-–≥–æ –∑–∞—Ä–∞—Ö—É–≤–∞–Ω–Ω—è': '',
                    '–ü–∞—Å–ø–æ—Ä—Ç': '–¢–ê–ö',
                    '–û–ø–∏—Ç—É–≤–∞–ª—å–Ω–∏–∫': '–ù–Ü',
                    '–î–æ–≥–æ–≤—ñ—Ä': '–¢–ê–ö'
                }
            ];

            // –°—Ç–≤–æ—Ä—é—î–º–æ Excel —Ñ–∞–π–ª
            const workbook = XLSX.utils.book_new();
            const worksheet = XLSX.utils.json_to_sheet(templateData);
            
            // –î–æ–¥–∞—î–º–æ —Å—Ç–∏–ª—ñ –¥–æ –∑–∞–≥–æ–ª–æ–≤–∫—ñ–≤ (—Ä–æ–±–∏–º–æ —ó—Ö –∂–∏—Ä–Ω–∏–º–∏)
            const headerCells = ['A1', 'B1', 'C1', 'D1', 'E1', 'F1', 'G1', 'H1'];
            headerCells.forEach(cell => {
                if (worksheet[cell]) {
                    worksheet[cell].s = {
                        font: { bold: true },
                        fill: { bgColor: { indexed: 64 }, fgColor: { rgb: "FFCCCCCC" } }
                    };
                }
            });

            // –ù–∞–ª–∞—à—Ç–æ–≤—É—î–º–æ —à–∏—Ä–∏–Ω—É –∫–æ–ª–æ–Ω–æ–∫
            worksheet['!cols'] = [
                { wch: 25 }, // –ü–Ü–ë
                { wch: 12 }, // –Ü–ü–ù
                { wch: 20 }, // Organisation
                { wch: 15 }, // –î–∞—Ç–∞ –≤—ñ–¥–∫—Ä–∏—Ç—Ç—è
                { wch: 18 }, // –î–∞—Ç–∞ 1-–≥–æ –∑–∞—Ä–∞—Ö—É–≤–∞–Ω–Ω—è
                { wch: 10 }, // –ü–∞—Å–ø–æ—Ä—Ç
                { wch: 15 }, // –û–ø–∏—Ç—É–≤–∞–ª—å–Ω–∏–∫
                { wch: 10 }  // –î–æ–≥–æ–≤—ñ—Ä
            ];

            XLSX.utils.book_append_sheet(workbook, worksheet, "–®–∞–±–ª–æ–Ω —ñ–º–ø–æ—Ä—Ç—É");
            
            // –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ —Ñ–∞–π–ª
            const filename = `–®–∞–±–ª–æ–Ω_—ñ–º–ø–æ—Ä—Ç—É_–∫–ª—ñ—î–Ω—Ç—ñ–≤.xlsx`;
            XLSX.writeFile(workbook, filename);
            
            this.showNotification('‚úÖ –®–∞–±–ª–æ–Ω –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ!', 'success');
            
        } catch (error) {
            console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —à–∞–±–ª–æ–Ω—É:', error);
            this.showNotification('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ —à–∞–±–ª–æ–Ω—É', 'error');
        }
    }

    // –ü–æ–∫–∞–∑–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ —Ä—ñ–∑–Ω–∏–º–∏ —Ç–∏–ø–∞–º–∏
    showNotification(message, type = 'info') {
        const colors = {
            'success': 'bg-green-500',
            'error': 'bg-red-500',
            'info': 'bg-blue-500',
            'warning': 'bg-yellow-500'
        };

        const icons = {
            'success': '‚úÖ',
            'error': '‚ùå',
            'info': '‚ÑπÔ∏è',
            'warning': '‚ö†Ô∏è'
        };

        const notification = document.createElement('div');
        notification.className = `fixed top-4 right-4 ${colors[type]} text-white p-4 rounded-lg shadow-lg z-50 max-w-sm`;
        notification.innerHTML = `
            <div class="flex items-center">
                <span class="mr-2">${icons[type]}</span>
                <span>${message}</span>
            </div>
        `;
        
        document.body.appendChild(notification);
        
        // –í–∏–¥–∞–ª–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
        setTimeout(() => {
            if (notification.parentNode) {
                notification.remove();
            }
        }, 5000);
    }
}

// –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∫–∞—Ä—Ç–æ–∫ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ —Å—Ç–æ—Ä—ñ–Ω–∫–∏
let cardManager;
document.addEventListener('DOMContentLoaded', () => {
    // –ß–µ–∫–∞—î–º–æ —Ç—Ä–æ—Ö–∏, —â–æ–± –≤—Å—ñ —Å–∫—Ä–∏–ø—Ç–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–∏–ª–∏—Å—å
    setTimeout(() => {
        console.log('üéØ –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è CardManager...');
        cardManager = new CardManager();
    }, 200);
});
