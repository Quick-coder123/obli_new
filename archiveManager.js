// –ì–ª–æ–±–∞–ª—å–Ω–∞ –∑–º—ñ–Ω–Ω–∞ –¥–ª—è —Å–µ—Ä–≤—ñ—Å—É –¥–∞–Ω–∏—Ö
let dataService;

// –ú–µ–Ω–µ–¥–∂–µ—Ä –∞—Ä—Ö—ñ–≤—É - –ª–æ–≥—ñ–∫–∞ –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ –∞—Ä—Ö—ñ–≤–Ω–∏–º–∏ –∫–∞—Ä—Ç–∫–∞–º–∏
class ArchiveManager {
    constructor() {
        this.archivedCards = [];
        this.editingCardId = null;
        this.init();
    }

    async init() {
        try {
            // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ —Å–µ—Ä–≤—ñ—Å –¥–∞–Ω–∏—Ö
            if (!dataService) {
                dataService = new DataService();
                await dataService.initialize();
            }
            
            this.bindEvents();
            await this.loadTable();
            console.log('‚úÖ ArchiveManager —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ —É—Å–ø—ñ—à–Ω–æ');
        } catch (error) {
            console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó ArchiveManager:', error);
        }
    }

    bindEvents() {
        // –§–æ—Ä–º–∞ –∫–∞—Ä—Ç–∫–∏
        const cardForm = document.getElementById('cardForm');
        if (cardForm) {
            cardForm.addEventListener('submit', (e) => this.handleFormSubmit(e));
        }

        // –ö–Ω–æ–ø–∫–∞ —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è
        const cancelBtn = document.getElementById('cancelBtn');
        if (cancelBtn) {
            cancelBtn.addEventListener('click', () => this.hideModal());
        }

        // –ó–∞–∫—Ä–∏—Ç—Ç—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –≤—ñ–∫–Ω–∞ –ø—Ä–∏ –∫–ª—ñ–∫—É –Ω–∞ backdrop
        const modal = document.getElementById('cardModal');
        if (modal) {
            modal.addEventListener('click', (e) => {
                if (e.target === modal) {
                    this.hideModal();
                }
            });
        }

        // –§—ñ–ª—å—Ç—Ä–∏
        const filters = ['filterOrganization', 'filterMonth', 'filterAccountStatus'];
        filters.forEach(filterId => {
            const filter = document.getElementById(filterId);
            if (filter) {
                filter.addEventListener('change', () => this.applyFilters());
            }
        });

        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É —Ä–∞—Ö—É–Ω–∫—É –ø—Ä–∏ –∑–º—ñ–Ω—ñ –¥–∞—Ç–∏
        const firstDepositDate = document.getElementById('firstDepositDate');
        if (firstDepositDate) {
            firstDepositDate.addEventListener('change', () => this.updateAccountStatus());
        }
    }

    showEditModal(cardId) {
        this.editingCardId = cardId;
        document.getElementById('modalTitle').textContent = '–†–µ–¥–∞–≥—É–≤–∞—Ç–∏ –∫–∞—Ä—Ç–∫—É';
        this.populateForm(cardId);
        this.showModal();
    }

    showModal() {
        const modal = document.getElementById('cardModal');
        modal.classList.remove('hidden');
        modal.classList.add('modal-backdrop');
        document.body.style.overflow = 'hidden';
    }

    hideModal() {
        const modal = document.getElementById('cardModal');
        modal.classList.add('hidden');
        modal.classList.remove('modal-backdrop');
        document.body.style.overflow = 'auto';
        this.clearForm();
    }

    clearForm() {
        const form = document.getElementById('cardForm');
        form.reset();
    }

    populateForm(cardId) {
        const card = this.archivedCards.find(c => c.id === cardId);
        if (!card) return;

        document.getElementById('fullName').value = card.fullName || '';
        document.getElementById('ipn').value = card.ipn || '';
        document.getElementById('organization').value = card.organization || '';
        document.getElementById('accountOpenDate').value = card.accountOpenDate || '';
        document.getElementById('firstDepositDate').value = card.firstDepositDate || '';
        document.getElementById('cardStatus').value = card.cardStatus || '–í–∏–≥–æ—Ç–æ–≤–ª—è—î—Ç—å—Å—è';
        document.getElementById('comment').value = card.comment || '';

        // –î–æ–∫—É–º–µ–Ω—Ç–∏
        document.getElementById('docContract').checked = card.documents?.contract || false;
        document.getElementById('docSurvey').checked = card.documents?.survey || false;
        document.getElementById('docPassport').checked = card.documents?.passport || false;
    }

    async handleFormSubmit(e) {
        e.preventDefault();
        
        const formData = this.getFormData();
        
        if (this.editingCardId) {
            await this.updateCard(this.editingCardId, formData);
        }
        
        this.hideModal();
        // loadTable –≤–∂–µ –≤–∏–∫–ª–∏–∫–∞—î—Ç—å—Å—è –≤ updateCard, –Ω–µ –ø–æ—Ç—Ä—ñ–±–Ω–æ –¥—É–±–ª—é–≤–∞—Ç–∏
    }

    getFormData() {
        return {
            fullName: document.getElementById('fullName').value,
            ipn: document.getElementById('ipn').value,
            organization: document.getElementById('organization').value,
            accountOpenDate: document.getElementById('accountOpenDate').value,
            firstDepositDate: document.getElementById('firstDepositDate').value,
            cardStatus: document.getElementById('cardStatus').value,
            comment: document.getElementById('comment').value,
            documents: {
                contract: document.getElementById('docContract').checked,
                survey: document.getElementById('docSurvey').checked,
                passport: document.getElementById('docPassport').checked
            }
        };
    }

    async updateCard(cardId, cardData) {
        try {
            const cardIndex = this.archivedCards.findIndex(c => c.id === cardId);
            if (cardIndex === -1) {
                throw new Error('–ö–∞—Ä—Ç–∫—É –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ –∞—Ä—Ö—ñ–≤—ñ');
            }

            const updatedCard = {
                ...this.archivedCards[cardIndex],
                ...cardData,
                accountStatus: this.calculateAccountStatus(cardData.firstDepositDate),
                updatedAt: new Date().toISOString()
            };

            // –û–Ω–æ–≤–ª—é—î–º–æ –≤ –±–∞–∑—ñ –¥–∞–Ω–∏—Ö
            await dataService.updateArchivedCard(cardId, updatedCard);
            
            // –û–Ω–æ–≤–ª—é—î–º–æ –ª–æ–∫–∞–ª—å–Ω–∏–π –º–∞—Å–∏–≤
            this.archivedCards[cardIndex] = updatedCard;
            
            // –û–Ω–æ–≤–ª—é—î–º–æ —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å
            await this.loadTable();
            this.showNotification('–ö–∞—Ä—Ç–∫—É –æ–Ω–æ–≤–ª–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ', 'success');

            // –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏, —á–∏ –∫–∞—Ä—Ç–∫–∞ –≤—Å–µ —â–µ –º–∞—î –±—É—Ç–∏ –≤ –∞—Ä—Ö—ñ–≤—ñ
            await this.checkArchiveStatus(updatedCard);
            
        } catch (error) {
            console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –∞—Ä—Ö—ñ–≤–Ω–æ—ó –∫–∞—Ä—Ç–∫–∏:', error);
            this.showNotification('–ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –∫–∞—Ä—Ç–∫–∏', 'error');
        }
    }

    async deleteCard(cardId) {
        if (confirm('–í–∏ –≤–ø–µ–≤–Ω–µ–Ω—ñ, —â–æ —Ö–æ—á–µ—Ç–µ –≤–∏–¥–∞–ª–∏—Ç–∏ —Ü—é –∫–∞—Ä—Ç–∫—É –∑ –∞—Ä—Ö—ñ–≤—É?')) {
            try {
                // –í–∏–¥–∞–ª—è—î–º–æ –∑ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
                await dataService.deleteArchivedCard(cardId);
                
                // –í–∏–¥–∞–ª—è—î–º–æ –∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –º–∞—Å–∏–≤—É
                this.archivedCards = this.archivedCards.filter(c => c.id !== cardId);
                
                // –û–Ω–æ–≤–ª—é—î–º–æ —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å
                await this.loadTable();
                this.showNotification('–ö–∞—Ä—Ç–∫—É –≤–∏–¥–∞–ª–µ–Ω–æ –∑ –∞—Ä—Ö—ñ–≤—É', 'success');
                
            } catch (error) {
                console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è –∫–∞—Ä—Ç–∫–∏ –∑ –∞—Ä—Ö—ñ–≤—É:', error);
                this.showNotification('–ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è –∫–∞—Ä—Ç–∫–∏', 'error');
            }
        }
    }

    calculateAccountStatus(firstDepositDate) {
        return firstDepositDate ? '–ê–∫—Ç–∏–≤–Ω–∏–π' : '–û—á—ñ–∫—É—î –∞–∫—Ç–∏–≤–∞—Ü—ñ—é';
    }

    updateAccountStatus() {
        // –í—ñ–∑—É–∞–ª—å–Ω–µ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É –≤ —Ñ–æ—Ä–º—ñ, —è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ
    }

    async checkArchiveStatus(card) {
        console.log('üîç –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å—É –∞—Ä—Ö—ñ–≤–Ω–æ—ó –∫–∞—Ä—Ç–∫–∏:', card);
        
        // –ö–∞—Ä—Ç–∫–∞ –ø–æ–≤–∏–Ω–Ω–∞ –∑–∞–ª–∏—à–∞—Ç–∏—Å—è –≤ –∞—Ä—Ö—ñ–≤—ñ —Ç—ñ–ª—å–∫–∏ —è–∫—â–æ –í–°–Ü —É–º–æ–≤–∏ –≤–∏–∫–æ–Ω–∞–Ω—ñ
        const shouldStayInArchive = 
            card.accountStatus === '–ê–∫—Ç–∏–≤–Ω–∏–π' &&
            card.cardStatus === '–í–∏–¥–∞–Ω–æ' &&
            card.documents?.contract === true &&
            card.documents?.survey === true &&
            card.documents?.passport === true;

        console.log('üìã –£–º–æ–≤–∏ –∞—Ä—Ö—ñ–≤—É–≤–∞–Ω–Ω—è:', {
            accountStatus: card.accountStatus,
            cardStatus: card.cardStatus,
            hasContract: card.documents?.contract,
            hasSurvey: card.documents?.survey,
            hasPassport: card.documents?.passport,
            shouldStayInArchive
        });

        if (!shouldStayInArchive) {
            try {
                console.log('üîÑ –ö–∞—Ä—Ç–∫–∞ –Ω–µ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î —É–º–æ–≤–∞–º –∞—Ä—Ö—ñ–≤—É–≤–∞–Ω–Ω—è, –ø–µ—Ä–µ–º—ñ—â—É—î–º–æ –Ω–∞–∑–∞–¥...');
                
                // –ü–µ—Ä–µ–º—ñ—â—É—î–º–æ –Ω–∞–∑–∞–¥ –≤ –∞–∫—Ç–∏–≤–Ω—ñ –∫–∞—Ä—Ç–∫–∏ —á–µ—Ä–µ–∑ Supabase
                await this.moveFromArchive(card);
                
                // –û–Ω–æ–≤–ª—é—î–º–æ –ª–æ–∫–∞–ª—å–Ω–∏–π —Å–ø–∏—Å–æ–∫
                this.archivedCards = this.archivedCards.filter(c => c.id !== card.id);
                
                // –û–Ω–æ–≤–ª—é—î–º–æ —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å
                await this.loadTable();
                
                this.showNotification('–ö–∞—Ä—Ç–∫—É –ø–µ—Ä–µ–º—ñ—â–µ–Ω–æ –Ω–∞–∑–∞–¥ –≤ –∞–∫—Ç–∏–≤–Ω—ñ –∫–∞—Ä—Ç–∫–∏', 'success');
            } catch (error) {
                console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–º—ñ—â–µ–Ω–Ω—è –∑ –∞—Ä—Ö—ñ–≤—É:', error);
                this.showNotification('–ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–º—ñ—â–µ–Ω–Ω—è –∫–∞—Ä—Ç–∫–∏', 'error');
            }
        } else {
            console.log('‚úÖ –ö–∞—Ä—Ç–∫–∞ –∑–∞–ª–∏—à–∞—î—Ç—å—Å—è –≤ –∞—Ä—Ö—ñ–≤—ñ (–≤—Å—ñ —É–º–æ–≤–∏ –≤–∏–∫–æ–Ω–∞–Ω—ñ)');
        }
    }

    async moveFromArchive(card) {
        if (!dataService.supabaseReady) {
            throw new Error('–ë–∞–∑–∞ –¥–∞–Ω–∏—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞');
        }

        console.log('üîÑ –ü–æ—á–∏–Ω–∞—î–º–æ –ø–µ—Ä–µ–º—ñ—â–µ–Ω–Ω—è –∑ –∞—Ä—Ö—ñ–≤—É:', card);

        try {
            // –ü—ñ–¥–≥–æ—Ç–æ–≤–ª—è—î–º–æ –∫–∞—Ä—Ç–∫—É –¥–ª—è –∞–∫—Ç–∏–≤–Ω–∏—Ö (–±–µ–∑ ID, —â–æ–± —Å—Ç–≤–æ—Ä–∏—Ç–∏ –Ω–æ–≤—É)
            const activeCard = {
                fullName: card.fullName,
                ipn: card.ipn,
                organization: card.organization,
                accountOpenDate: card.accountOpenDate,
                firstDepositDate: card.firstDepositDate,
                cardStatus: card.cardStatus,
                comment: card.comment,
                documents: card.documents,
                accountStatus: card.accountStatus,
                createdAt: card.createdAt,
                updatedAt: new Date().toISOString()
            };

            console.log('üì§ –ü—ñ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–∞ –∫–∞—Ä—Ç–∫–∞ –¥–ª—è –∞–∫—Ç–∏–≤–Ω–∏—Ö:', activeCard);
            
            const supabaseCard = dataService.formatCardForSupabase(activeCard);
            console.log('üì§ –§–æ—Ä–º–∞—Ç–æ–≤–∞–Ω–∞ –∫–∞—Ä—Ç–∫–∞ –¥–ª—è Supabase:', supabaseCard);
            
            const { error: insertError } = await supabaseClient
                .from(SUPABASE_CONFIG.tables.cards)
                .insert([supabaseCard]);
            
            if (insertError) {
                console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –≤ –∞–∫—Ç–∏–≤–Ω—ñ –∫–∞—Ä—Ç–∫–∏:', insertError);
                throw insertError;
            }

            console.log('‚úÖ –ö–∞—Ä—Ç–∫—É –¥–æ–¥–∞–Ω–æ –≤ –∞–∫—Ç–∏–≤–Ω—ñ, –≤–∏–¥–∞–ª—è—î–º–æ –∑ –∞—Ä—Ö—ñ–≤—É...');

            // –í–∏–¥–∞–ª—è—î–º–æ –∑ –∞—Ä—Ö—ñ–≤—É
            const { error: deleteError } = await supabaseClient
                .from(SUPABASE_CONFIG.tables.archivedCards)
                .delete()
                .eq('id', card.id);
            
            if (deleteError) {
                console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è –∑ –∞—Ä—Ö—ñ–≤—É:', deleteError);
                throw deleteError;
            }

            console.log('‚úÖ –ö–∞—Ä—Ç–∫—É —É—Å–ø—ñ—à–Ω–æ –ø–µ—Ä–µ–º—ñ—â–µ–Ω–æ –∑ –∞—Ä—Ö—ñ–≤—É –≤ –∞–∫—Ç–∏–≤–Ω—ñ');
            return true;
        } catch (error) {
            console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–º—ñ—â–µ–Ω–Ω—è –∑ –∞—Ä—Ö—ñ–≤—É:', error);
            throw new Error(`–ù–µ –≤–¥–∞–ª–æ—Å—è –ø–µ—Ä–µ–º—ñ—Å—Ç–∏—Ç–∏ –∫–∞—Ä—Ç–∫—É –∑ –∞—Ä—Ö—ñ–≤—É: ${error.message}`);
        }
    }

    async loadTable() {
        try {
            this.archivedCards = await dataService.getArchivedCards();
            
            const tbody = document.getElementById('archiveTableBody');
            if (!tbody) return;

            const filteredCards = this.getFilteredCards();
            tbody.innerHTML = '';

            if (filteredCards.length === 0) {
            tbody.innerHTML = `
                <tr>
                    <td colspan="11" class="px-6 py-4 text-center text-gray-500">
                        –ù–µ–º–∞—î –∫–∞—Ä—Ç–æ–∫ –≤ –∞—Ä—Ö—ñ–≤—ñ
                    </td>
                </tr>
            `;
            return;
        }

        filteredCards.forEach((card, index) => {
            const row = this.createTableRow(card, index + 1);
            tbody.appendChild(row);
        });
        } catch (error) {
            console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∞—Ä—Ö—ñ–≤–Ω–∏—Ö –∫–∞—Ä—Ç–æ–∫:', error);
        }
    }

    createTableRow(card, number) {
        const row = document.createElement('tr');
        row.className = 'hover:bg-gray-50';
        
        row.innerHTML = `
            <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">${number}</td>
            <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">${card.fullName}</td>
            <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">${card.ipn}</td>
            <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">${card.organization}</td>
            <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">${this.formatDate(card.accountOpenDate)}</td>
            <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">${this.formatDate(card.firstDepositDate)}</td>
            <td class="px-6 py-4 whitespace-nowrap">
                <span class="status-badge ${card.accountStatus === '–ê–∫—Ç–∏–≤–Ω–∏–π' ? 'status-active' : 'status-pending'}">
                    ${card.accountStatus}
                </span>
            </td>
            <td class="px-6 py-4 whitespace-nowrap">
                <span class="card-status-badge ${this.getCardStatusClass(card.cardStatus)}">
                    ${card.cardStatus}
                </span>
            </td>
            <td class="px-6 py-4 whitespace-nowrap">
                <div class="documents-list">
                    ${this.renderDocuments(card.documents)}
                </div>
            </td>
            <td class="px-6 py-4 text-sm text-gray-900">${card.comment || ''}</td>
            <td class="px-6 py-4 whitespace-nowrap text-sm font-medium">
                <button onclick="archiveManager.showEditModal('${card.id}')" class="text-indigo-600 hover:text-indigo-900 mr-2">
                    –†–µ–¥–∞–≥—É–≤–∞—Ç–∏
                </button>
                <button onclick="archiveManager.deleteCard('${card.id}')" class="text-red-600 hover:text-red-900">
                    –í–∏–¥–∞–ª–∏—Ç–∏
                </button>
            </td>
        `;
        
        return row;
    }

    getCardStatusClass(status) {
        const statusClasses = {
            '–í–∏–≥–æ—Ç–æ–≤–ª—è—î—Ç—å—Å—è': 'card-status-manufacturing',
            '–ù–∞ –≤—ñ–¥–¥—ñ–ª–µ–Ω–Ω—ñ': 'card-status-office',
            '–ù–∞ –æ—Ä–≥–∞–Ω—ñ–∑–∞—Ü—ñ—ó': 'card-status-organization',
            '–í–∏–¥–∞–Ω–∞': 'card-status-issued'
        };
        return statusClasses[status] || 'card-status-manufacturing';
    }

    renderDocuments(documents) {
        if (!documents) return '';
        
        const docs = [];
        if (documents.contract) docs.push('<span class="document-badge completed">–î–æ–≥–æ–≤—ñ—Ä</span>');
        if (documents.survey) docs.push('<span class="document-badge completed">–û–ø–∏—Ç—É–≤–∞–ª—å–Ω–∏–∫</span>');
        if (documents.passport) docs.push('<span class="document-badge completed">–ü–∞—Å–ø–æ—Ä—Ç</span>');
        
        return docs.join('');
    }

    formatDate(dateString) {
        if (!dateString) return '';
        const date = new Date(dateString);
        return date.toLocaleDateString('uk-UA');
    }

    getFilteredCards() {
        let filtered = [...this.archivedCards];
        
        const orgFilter = document.getElementById('filterOrganization')?.value;
        const monthFilter = document.getElementById('filterMonth')?.value;
        const statusFilter = document.getElementById('filterAccountStatus')?.value;
        
        if (orgFilter) {
            filtered = filtered.filter(card => card.organization === orgFilter);
        }
        
        if (monthFilter) {
            filtered = filtered.filter(card => {
                if (!card.accountOpenDate) return false;
                const cardMonth = new Date(card.accountOpenDate).getMonth() + 1;
                return cardMonth.toString().padStart(2, '0') === monthFilter;
            });
        }
        
        if (statusFilter) {
            filtered = filtered.filter(card => card.accountStatus === statusFilter);
        }
        
        return filtered;
    }

    populateFilters() {
        this.populateOrganizationFilter();
    }

    populateOrganizationFilter() {
        const select = document.getElementById('filterOrganization');
        if (!select) return;

        const organizations = [...new Set(this.archivedCards.map(card => card.organization))];
        
        // –û—á–∏—Å—Ç–∏—Ç–∏ —ñ—Å–Ω—É—é—á—ñ –æ–ø—Ü—ñ—ó (–∫—Ä—ñ–º –ø–µ—Ä—à–æ—ó)
        while (select.children.length > 1) {
            select.removeChild(select.lastChild);
        }
        
        organizations.forEach(org => {
            const option = document.createElement('option');
            option.value = org;
            option.textContent = org;
            select.appendChild(option);
        });
    }

    applyFilters() {
        this.loadTable();
    }

    // –ü–æ–∫–∞–∑–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    showNotification(message, type = 'info') {
        const colors = {
            'success': 'bg-green-500',
            'error': 'bg-red-500',
            'info': 'bg-blue-500',
            'warning': 'bg-yellow-500'
        };

        const icons = {
            'success': '‚úÖ',
            'error': '‚ùå',
            'info': '‚ÑπÔ∏è',
            'warning': '‚ö†Ô∏è'
        };

        const notification = document.createElement('div');
        notification.className = `fixed top-4 right-4 ${colors[type]} text-white p-4 rounded-lg shadow-lg z-50 max-w-sm`;
        notification.innerHTML = `
            <div class="flex items-center">
                <span class="mr-2">${icons[type]}</span>
                <span>${message}</span>
            </div>
        `;
        
        document.body.appendChild(notification);
        
        // –í–∏–¥–∞–ª–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥–∏
        setTimeout(() => {
            if (notification.parentNode) {
                notification.remove();
            }
        }, 3000);
    }

    // –ú–µ—Ç–æ–¥ –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∞—Ä—Ö—ñ–≤–Ω–∏—Ö –∫–∞—Ä—Ç–æ–∫ –¥–ª—è –∑–≤—ñ—Ç—ñ–≤
    getArchivedCards() {
        return this.archivedCards;
    }
}

// –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∞—Ä—Ö—ñ–≤—É –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ —Å—Ç–æ—Ä—ñ–Ω–∫–∏
let archiveManager;
document.addEventListener('DOMContentLoaded', () => {
    // –ß–µ–∫–∞—î–º–æ —Ç—Ä–æ—Ö–∏, —â–æ–± –≤—Å—ñ —Å–∫—Ä–∏–ø—Ç–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–∏–ª–∏—Å—å
    setTimeout(() => {
        console.log('üì¶ –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è ArchiveManager...');
        archiveManager = new ArchiveManager();
    }, 200);
});
