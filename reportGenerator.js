// –ì–ª–æ–±–∞–ª—å–Ω–∞ –∑–º—ñ–Ω–Ω–∞ –¥–ª—è —Å–µ—Ä–≤—ñ—Å—É –¥–∞–Ω–∏—Ö
let dataService;

// –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∑–≤—ñ—Ç—ñ–≤ - –ª–æ–≥—ñ–∫–∞ –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–≤—ñ—Ç—ñ–≤ –ø–æ –∫–∞—Ä—Ç–∫–∞—Ö
class ReportGenerator {
    constructor() {
        this.allCards = [];
        this.init();
    }

    async init() {
        try {
            consol                // –î–æ–¥–∞—î–º–æ —Å—Ç–æ–≤–ø—Ü—ñ –º—ñ—Å—è—Ü—ñ–≤
                for (let month = 0; month < 12; month++) {
                    const count = organizationData[org][month] || 0;
                    rowTotal += count;
                    
                    rowHTML += `<td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900" style="text-align: center;">
                        ${count > 0 ? count : ''}
                    </td>`;
                }
                
                // –°—Ç–æ–≤–ø–µ—Ü—å "–í—Å—å–æ–≥–æ"
                rowHTML += `<td class="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900" style="text-align: center; bg-blue-50">
                    ${rowTotal > 0 ? rowTotal : ''}
                </td>`;—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ ReportGenerator...');
            
            // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ —Å–µ—Ä–≤—ñ—Å –¥–∞–Ω–∏—Ö
            if (!dataService) {
                dataService = new DataService();
                await dataService.init();
            }
            
            this.bindEvents();
            await this.loadData();
            this.populateYearFilters();
            await this.generateAllReports();
            
            console.log('‚úÖ ReportGenerator —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ');
        } catch (error) {
            console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó ReportGenerator:', error);
        }
    }
    
    async loadData() {
        try {
            console.log('üì• –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –¥–∞–Ω—ñ –∑ –±–∞–∑–∏...');
            
            // –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –∞–∫—Ç–∏–≤–Ω—ñ —Ç–∞ –∞—Ä—Ö—ñ–≤–Ω—ñ –∫–∞—Ä—Ç–∫–∏
            const activeCards = await dataService.getCards();
            const archivedCards = await dataService.getArchivedCards();
            
            console.log('üìä –ê–∫—Ç–∏–≤–Ω–∏—Ö –∫–∞—Ä—Ç–æ–∫:', activeCards?.length || 0);
            console.log('üìä –ê—Ä—Ö—ñ–≤–Ω–∏—Ö –∫–∞—Ä—Ç–æ–∫:', archivedCards?.length || 0);
            
            // –û–±'—î–¥–Ω—É—î–º–æ –≤—Å—ñ –∫–∞—Ä—Ç–∫–∏
            this.allCards = [...(activeCards || []), ...(archivedCards || [])];
            
            console.log('‚úÖ –î–∞–Ω—ñ –¥–ª—è –∑–≤—ñ—Ç—ñ–≤ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ:', this.allCards.length, '–∫–∞—Ä—Ç–æ–∫');
            
            if (this.allCards.length > 0) {
                console.log('üìù –ü—Ä–∏–∫–ª–∞–¥ –∫–∞—Ä—Ç–∫–∏:', this.allCards[0]);
            }
        } catch (error) {
            console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö –¥–ª—è –∑–≤—ñ—Ç—ñ–≤:', error);
            this.allCards = [];
        }
    }

    bindEvents() {
        // –§—ñ–ª—å—Ç—Ä–∏ –ø–æ —Ä–æ–∫–∞—Ö
        const openedCardsYearFilter = document.getElementById('openedCardsYear');
        const activeAccountsYearFilter = document.getElementById('activeAccountsYear');
        
        if (openedCardsYearFilter) {
            openedCardsYearFilter.addEventListener('change', async () => {
                await this.generateOpenedCardsReport();
            });
        }
        
        if (activeAccountsYearFilter) {
            activeAccountsYearFilter.addEventListener('change', async () => {
                await this.generateActiveAccountsReport();
            });
        }
    }

    loadCards() {
        const saved = localStorage.getItem('cards');
        return saved ? JSON.parse(saved) : [];
    }

    loadArchivedCards() {
        const saved = localStorage.getItem('archivedCards');
        return saved ? JSON.parse(saved) : [];
    }

    populateYearFilters() {
        const years = this.getAvailableYears();
        const currentYear = new Date().getFullYear();
        
        // –ó–∞–ø–æ–≤–Ω–∏—Ç–∏ —Ñ—ñ–ª—å—Ç—Ä –¥–ª—è –≤—ñ–¥–∫—Ä–∏—Ç–∏—Ö –∫–∞—Ä—Ç–æ–∫
        const openedCardsYearSelect = document.getElementById('openedCardsYear');
        if (openedCardsYearSelect) {
            this.populateYearSelect(openedCardsYearSelect, years, currentYear);
        }
        
        // –ó–∞–ø–æ–≤–Ω–∏—Ç–∏ —Ñ—ñ–ª—å—Ç—Ä –¥–ª—è –∞–∫—Ç–∏–≤–Ω–∏—Ö —Ä–∞—Ö—É–Ω–∫—ñ–≤
        const activeAccountsYearSelect = document.getElementById('activeAccountsYear');
        if (activeAccountsYearSelect) {
            this.populateYearSelect(activeAccountsYearSelect, years, currentYear);
        }
    }

    populateYearSelect(select, years, defaultYear) {
        select.innerHTML = '';
        
        years.forEach(year => {
            const option = document.createElement('option');
            option.value = year;
            option.textContent = year;
            if (year === defaultYear) {
                option.selected = true;
            }
            select.appendChild(option);
        });
    }

    getAvailableYears() {
        const years = new Set();
        
        this.allCards.forEach(card => {
            if (card.accountOpenDate) {
                const year = new Date(card.accountOpenDate).getFullYear();
                years.add(year);
            }
            if (card.firstDepositDate) {
                const year = new Date(card.firstDepositDate).getFullYear();
                years.add(year);
            }
        });
        
        // –î–æ–¥–∞—Ç–∏ –ø–æ—Ç–æ—á–Ω–∏–π —Ä—ñ–∫, —è–∫—â–æ –π–æ–≥–æ –Ω–µ–º–∞—î
        years.add(new Date().getFullYear());
        
        return Array.from(years).sort((a, b) => b - a); // –°–æ—Ä—Ç—É–≤–∞–Ω–Ω—è –ø–æ —Å–ø–∞–¥–∞–Ω–Ω—é
    }

    async generateAllReports() {
        console.log('üöÄ –ì–µ–Ω–µ—Ä—É—î–º–æ –≤—Å—ñ –∑–≤—ñ—Ç–∏...');
        await this.generateOpenedCardsReport();
        await this.generateActiveAccountsReport();
        await this.generateStatusReport();
    }

    async generateOpenedCardsReport() {
        const selectedYear = parseInt(document.getElementById('openedCardsYear')?.value) || new Date().getFullYear();
        const tbody = document.getElementById('openedCardsTableBody');
        
        if (!tbody) {
            console.error('‚ùå –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ tbody –¥–ª—è –≤—ñ–¥–∫—Ä–∏—Ç–∏—Ö –∫–∞—Ä—Ç–æ–∫');
            return;
        }

        console.log('üîÑ –ì–µ–Ω–µ—Ä—É—î–º–æ –∑–≤—ñ—Ç –≤—ñ–¥–∫—Ä–∏—Ç–∏—Ö –∫–∞—Ä—Ç–æ–∫ –¥–ª—è —Ä–æ–∫—É:', selectedYear);
        
        try {
            // –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ —Å–≤—ñ–∂—ñ –¥–∞–Ω—ñ –±–µ–∑–ø–æ—Å–µ—Ä–µ–¥–Ω—å–æ –∑ –±–∞–∑–∏
            console.log('üì• –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ —Å–≤—ñ–∂—ñ –¥–∞–Ω—ñ...');
            const activeCards = await dataService.getCards();
            const archivedCards = await dataService.getArchivedCards();
            const allCards = [...(activeCards || []), ...(archivedCards || [])];
            
            console.log(`üìä –í—Å—å–æ–≥–æ –∫–∞—Ä—Ç–æ–∫: ${allCards.length}`);
            
            // –û–±—Ä–æ–±–ª—è—î–º–æ –¥–∞–Ω—ñ –¥–ª—è –≤—ñ–¥–∫—Ä–∏—Ç–∏—Ö –∫–∞—Ä—Ç–æ–∫
            const organizationData = {};
            const monthTotals = Array(12).fill(0);
            let grandTotal = 0;
            
            allCards.forEach((card, index) => {
                // –®—É–∫–∞—î–º–æ –¥–∞—Ç—É –≤—ñ–¥–∫—Ä–∏—Ç—Ç—è
                let openDate = null;
                let usedField = null;
                
                if (card.accountOpenDate) {
                    openDate = new Date(card.accountOpenDate);
                    usedField = 'accountOpenDate';
                } else if (card.account_open_date) {
                    openDate = new Date(card.account_open_date);
                    usedField = 'account_open_date';
                } else if (card.dateOpened) {
                    openDate = new Date(card.dateOpened);
                    usedField = 'dateOpened';
                } else if (card.created_at) {
                    openDate = new Date(card.created_at);
                    usedField = 'created_at';
                }
                
                // –õ–æ–≥—É–≤–∞–Ω–Ω—è –¥–ª—è –ø–µ—Ä—à–∏—Ö 3 –∫–∞—Ä—Ç–æ–∫
                if (index < 3) {
                    console.log(`üìã –ö–∞—Ä—Ç–∫–∞ ${index + 1}:`, {
                        org: card.organization,
                        accountOpenDate: card.accountOpenDate,
                        account_open_date: card.account_open_date,
                        dateOpened: card.dateOpened,
                        created_at: card.created_at,
                        usedField,
                        parsedDate: openDate,
                        validDate: openDate && !isNaN(openDate.getTime()),
                        year: openDate ? openDate.getFullYear() : null
                    });
                }
                
                // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –¥–∞—Ç–∞ –≤–∞–ª—ñ–¥–Ω–∞ —Ç–∞ –Ω–∞–ª–µ–∂–∏—Ç—å –¥–æ —Ä–æ–∫—É
                if (openDate && !isNaN(openDate.getTime()) && openDate.getFullYear() === selectedYear) {
                    const month = openDate.getMonth(); // 0-11
                    const org = card.organization || '–ù–µ–≤—ñ–¥–æ–º–∞ –æ—Ä–≥–∞–Ω—ñ–∑–∞—Ü—ñ—è';
                    
                    // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ –æ—Ä–≥–∞–Ω—ñ–∑–∞—Ü—ñ—é
                    if (!organizationData[org]) {
                        organizationData[org] = Array(12).fill(0);
                    }
                    
                    // –î–æ–¥–∞—î–º–æ –∫–∞—Ä—Ç–∫—É
                    organizationData[org][month]++;
                    monthTotals[month]++;
                    grandTotal++;
                    
                    console.log(`‚úÖ –î–æ–¥–∞–Ω–æ: ${org} - ${openDate.toLocaleDateString()} (–º—ñ—Å—è—Ü—å: ${month + 1})`);
                }
            });
            
            console.log('üéØ –ü—ñ–¥—Å—É–º–æ–∫ –æ–±—Ä–æ–±–∫–∏:', {
                organizationData,
                monthTotals,
                grandTotal
            });
            
            // –û—á–∏—â—É—î–º–æ —Ç–∞–±–ª–∏—Ü—é
            tbody.innerHTML = '';
            
            // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —î –¥–∞–Ω—ñ
            if (Object.keys(organizationData).length === 0) {
                tbody.innerHTML = `
                    <tr>
                        <td colspan="14" class="px-6 py-4 text-center text-yellow-600 bg-yellow-50">
                            –ù–µ–º–∞—î –¥–∞–Ω–∏—Ö –≤—ñ–¥–∫—Ä–∏—Ç–∏—Ö –∫–∞—Ä—Ç–æ–∫ –∑–∞ ${selectedYear} —Ä—ñ–∫.
                            <br>–ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ, —á–∏ –¥–æ–¥–∞–Ω—ñ –¥–∞—Ç–∏ –≤—ñ–¥–∫—Ä–∏—Ç—Ç—è —Ä–∞—Ö—É–Ω–∫—É —É –∫–∞—Ä—Ç–∫–∏.
                        </td>
                    </tr>
                `;
                return;
            }
            
            // –°—Ç–≤–æ—Ä—é—î–º–æ —Ä—è–¥–∫–∏ –¥–ª—è –æ—Ä–≥–∞–Ω—ñ–∑–∞—Ü—ñ–π
            Object.keys(organizationData).sort().forEach(org => {
                const row = document.createElement('tr');
                row.className = 'hover:bg-gray-50';
                
                let rowTotal = 0;
                let rowHTML = `<td class="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900">${org}</td>`;
                
                // –î–æ–¥–∞—î–º–æ —Å—Ç–æ–≤–ø—Ü—ñ –º—ñ—Å—è—Ü—ñ–≤
                for (let month = 0; month < 12; month++) {
                    const count = organizationData[org][month] || 0;
                    rowTotal += count;
                    
                    rowHTML += `<td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900" style="text-align: center;">
                        ${count > 0 ? count : ''}
                    </td>`;
                }
                
                // –°—Ç–æ–≤–ø–µ—Ü—å "–í—Å—å–æ–≥–æ"
                rowHTML += `<td class="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900" style="text-align: center; bg-blue-50">
                    ${rowTotal > 0 ? rowTotal : ''}
                </td>`;
                
                row.innerHTML = rowHTML;
                tbody.appendChild(row);
            });
            
            // –û–Ω–æ–≤–ª—é—î–º–æ –ø—ñ–¥—Å—É–º–∫–∏
            for (let i = 1; i <= 12; i++) {
                const totalElement = document.getElementById(`monthTotal${i}`);
                if (totalElement) {
                    totalElement.textContent = monthTotals[i - 1] > 0 ? monthTotals[i - 1] : '';
                }
            }
            
            const grandTotalElement = document.getElementById('grandTotal');
            if (grandTotalElement) {
                grandTotalElement.textContent = grandTotal > 0 ? grandTotal : '';
            }
            
            console.log('‚úÖ –ó–≤—ñ—Ç –≤—ñ–¥–∫—Ä–∏—Ç–∏—Ö –∫–∞—Ä—Ç–æ–∫ –∑–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–æ —É—Å–ø—ñ—à–Ω–æ');
            
        } catch (error) {
            console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –∑–≤—ñ—Ç—É –≤—ñ–¥–∫—Ä–∏—Ç–∏—Ö –∫–∞—Ä—Ç–æ–∫:', error);
            tbody.innerHTML = `
                <tr>
                    <td colspan="14" class="px-6 py-4 text-center text-red-600 bg-red-50">
                        –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö: ${error.message}
                    </td>
                </tr>
            `;
        }
    }

    async processOpenedCardsData(year) {
        const organizationData = {};
        
        try {
            console.log('üì• –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ —Å–≤—ñ–∂—ñ –¥–∞–Ω—ñ –∑ –±–∞–∑–∏ –¥–ª—è –≤—ñ–¥–∫—Ä–∏—Ç–∏—Ö –∫–∞—Ä—Ç–æ–∫...');
            
            // –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ —Å–≤—ñ–∂—ñ –¥–∞–Ω—ñ –∑ –∞–∫—Ç–∏–≤–Ω–∏—Ö –∫–∞—Ä—Ç–æ–∫ —Ç–∞ –∞—Ä—Ö—ñ–≤—É
            const activeCards = await dataService.getCards();
            const archivedCards = await dataService.getArchivedCards();
            
            console.log('üìä –ê–∫—Ç–∏–≤–Ω–∏—Ö –∫–∞—Ä—Ç–æ–∫:', activeCards?.length || 0);
            console.log('üìä –ê—Ä—Ö—ñ–≤–Ω–∏—Ö –∫–∞—Ä—Ç–æ–∫:', archivedCards?.length || 0);
            
            // –û–±'—î–¥–Ω—É—î–º–æ –≤—Å—ñ –∫–∞—Ä—Ç–∫–∏
            const allCards = [...(activeCards || []), ...(archivedCards || [])];
            
            console.log(`üîç –û–±—Ä–æ–±–ª—è—î–º–æ ${allCards.length} –∫–∞—Ä—Ç–æ–∫ –¥–ª—è –≤—ñ–¥–∫—Ä–∏—Ç–∏—Ö –∫–∞—Ä—Ç–æ–∫ —É —Ä–æ—Ü—ñ ${year}`);
            
            if (allCards.length > 0) {
                console.log('üìù –ü—Ä–∏–∫–ª–∞–¥ –∫–∞—Ä—Ç–∫–∏ –¥–ª—è –≤—ñ–¥–∫—Ä–∏—Ç–∏—Ö –∫–∞—Ä—Ç–æ–∫:', allCards[0]);
            }
            
            allCards.forEach((card, index) => {
                // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Ä—ñ–∑–Ω—ñ –º–æ–∂–ª–∏–≤—ñ –ø–æ–ª—è –¥–∞—Ç –≤—ñ–¥–∫—Ä–∏—Ç—Ç—è
                let openDate = null;
                let dateField = null;
                
                if (card.accountOpenDate) {
                    openDate = new Date(card.accountOpenDate);
                    dateField = 'accountOpenDate';
                } else if (card.account_open_date) {
                    openDate = new Date(card.account_open_date);
                    dateField = 'account_open_date';
                } else if (card.dateOpened) {
                    openDate = new Date(card.dateOpened);
                    dateField = 'dateOpened';
                } else if (card.created_at) {
                    openDate = new Date(card.created_at);
                    dateField = 'created_at';
                }
                
                if (index < 5) {
                    console.log(`üìÖ –ö–∞—Ä—Ç–∫–∞ ${index + 1} –¥–ª—è –≤—ñ–¥–∫—Ä–∏—Ç–∏—Ö –∫–∞—Ä—Ç–æ–∫:`, {
                        org: card.organization,
                        accountOpenDate: card.accountOpenDate,
                        account_open_date: card.account_open_date,
                        dateOpened: card.dateOpened,
                        created_at: card.created_at,
                        usedField: dateField,
                        parsedDate: openDate,
                        year: openDate ? openDate.getFullYear() : null,
                        month: openDate ? openDate.getMonth() + 1 : null
                    });
                }
                
                // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –¥–∞—Ç–∞ –Ω–∞–ª–µ–∂–∏—Ç—å –¥–æ –≤–∏–±—Ä–∞–Ω–æ–≥–æ —Ä–æ–∫—É
                if (openDate && !isNaN(openDate.getTime()) && openDate.getFullYear() === year) {
                    const month = openDate.getMonth(); // 0-11
                    const org = card.organization || '–ù–µ–≤—ñ–¥–æ–º–∞ –æ—Ä–≥–∞–Ω—ñ–∑–∞—Ü—ñ—è';
                    
                    // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ –æ—Ä–≥–∞–Ω—ñ–∑–∞—Ü—ñ—é, —è–∫—â–æ —ó—ó —â–µ –Ω–µ–º–∞—î
                    if (!organizationData[org]) {
                        organizationData[org] = Array(12).fill(0);
                    }
                    
                    // –ó–±—ñ–ª—å—à—É—î–º–æ –ª—ñ—á–∏–ª—å–Ω–∏–∫ –¥–ª—è —Ü—å–æ–≥–æ –º—ñ—Å—è—Ü—è
                    organizationData[org][month]++;
                    
                    console.log(`‚úÖ –î–æ–¥–∞–Ω–æ –≤—ñ–¥–∫—Ä–∏—Ç—É –∫–∞—Ä—Ç–∫—É: ${org} - ${openDate.toLocaleDateString()} (–º—ñ—Å—è—Ü—å ${month + 1}, —ñ–Ω–¥–µ–∫—Å ${month})`);
                }
            });
            
            console.log('üéØ –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–æ–±–∫–∏ –≤—ñ–¥–∫—Ä–∏—Ç–∏—Ö –∫–∞—Ä—Ç–æ–∫:', organizationData);
            
        } catch (error) {
            console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –¥–∞–Ω–∏—Ö –≤—ñ–¥–∫—Ä–∏—Ç–∏—Ö –∫–∞—Ä—Ç–æ–∫:', error);
        }
        
        return organizationData;
    }

    getOpenedCardsData(year) {
        const monthNames = [
            '–°—ñ—á–µ–Ω—å', '–õ—é—Ç–∏–π', '–ë–µ—Ä–µ–∑–µ–Ω—å', '–ö–≤—ñ—Ç–µ–Ω—å', '–¢—Ä–∞–≤–µ–Ω—å', '–ß–µ—Ä–≤–µ–Ω—å',
            '–õ–∏–ø–µ–Ω—å', '–°–µ—Ä–ø–µ–Ω—å', '–í–µ—Ä–µ—Å–µ–Ω—å', '–ñ–æ–≤—Ç–µ–Ω—å', '–õ–∏—Å—Ç–æ–ø–∞–¥', '–ì—Ä—É–¥–µ–Ω—å'
        ];

        const data = {};
        
        this.allCards
            .filter(card => card.accountOpenDate && new Date(card.accountOpenDate).getFullYear() === year)
            .forEach(card => {
                const month = new Date(card.accountOpenDate).getMonth();
                const monthName = monthNames[month];
                const org = card.organization;
                
                const key = `${monthName}-${org}`;
                if (!data[key]) {
                    data[key] = {
                        month: monthName,
                        organization: org,
                        count: 0
                    };
                }
                data[key].count++;
            });

        return Object.values(data).sort((a, b) => {
            const monthA = monthNames.indexOf(a.month);
            const monthB = monthNames.indexOf(b.month);
            if (monthA !== monthB) return monthA - monthB;
            return a.organization.localeCompare(b.organization);
        });
    }

    async generateActiveAccountsReport() {
        const selectedYear = parseInt(document.getElementById('activeAccountsYear')?.value) || new Date().getFullYear();
        const tbody = document.getElementById('activeAccountsTableBody');
        
        if (!tbody) {
            console.error('‚ùå –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ tbody –¥–ª—è –∞–∫—Ç–∏–≤–Ω–∏—Ö —Ä–∞—Ö—É–Ω–∫—ñ–≤');
            return;
        }

        console.log('üîÑ –ì–µ–Ω–µ—Ä—É—î–º–æ –∑–≤—ñ—Ç –∞–∫—Ç–∏–≤–Ω–∏—Ö —Ä–∞—Ö—É–Ω–∫—ñ–≤ –¥–ª—è —Ä–æ–∫—É:', selectedYear);
        
        try {
            // –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ —Å–≤—ñ–∂—ñ –¥–∞–Ω—ñ –±–µ–∑–ø–æ—Å–µ—Ä–µ–¥–Ω—å–æ –∑ –±–∞–∑–∏
            console.log('üì• –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ —Å–≤—ñ–∂—ñ –¥–∞–Ω—ñ...');
            const activeCards = await dataService.getCards();
            const archivedCards = await dataService.getArchivedCards();
            const allCards = [...(activeCards || []), ...(archivedCards || [])];
            
            console.log(`üìä –í—Å—å–æ–≥–æ –∫–∞—Ä—Ç–æ–∫: ${allCards.length}`);
            
            // –û–±—Ä–æ–±–ª—è—î–º–æ –¥–∞–Ω—ñ –¥–ª—è –∞–∫—Ç–∏–≤–Ω–∏—Ö —Ä–∞—Ö—É–Ω–∫—ñ–≤
            const organizationData = {};
            const monthTotals = Array(12).fill(0);
            let grandTotal = 0;
            
            allCards.forEach((card, index) => {
                // –®—É–∫–∞—î–º–æ –¥–∞—Ç—É –ø–µ—Ä—à–æ–≥–æ –∑–∞—Ä–∞—Ö—É–≤–∞–Ω–Ω—è
                let depositDate = null;
                let usedField = null;
                
                if (card.firstDepositDate) {
                    depositDate = new Date(card.firstDepositDate);
                    usedField = 'firstDepositDate';
                } else if (card.first_deposit_date) {
                    depositDate = new Date(card.first_deposit_date);
                    usedField = 'first_deposit_date';
                } else if (card.dateFirstDeposit) {
                    depositDate = new Date(card.dateFirstDeposit);
                    usedField = 'dateFirstDeposit';
                } else if (card.activationDate) {
                    depositDate = new Date(card.activationDate);
                    usedField = 'activationDate';
                }
                
                // –õ–æ–≥—É–≤–∞–Ω–Ω—è –¥–ª—è –ø–µ—Ä—à–∏—Ö 3 –∫–∞—Ä—Ç–æ–∫
                if (index < 3) {
                    console.log(`üìã –ö–∞—Ä—Ç–∫–∞ ${index + 1}:`, {
                        org: card.organization,
                        firstDepositDate: card.firstDepositDate,
                        first_deposit_date: card.first_deposit_date,
                        dateFirstDeposit: card.dateFirstDeposit,
                        activationDate: card.activationDate,
                        usedField,
                        parsedDate: depositDate,
                        validDate: depositDate && !isNaN(depositDate.getTime()),
                        year: depositDate ? depositDate.getFullYear() : null
                    });
                }
                
                // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –¥–∞—Ç–∞ –≤–∞–ª—ñ–¥–Ω–∞ —Ç–∞ –Ω–∞–ª–µ–∂–∏—Ç—å –¥–æ —Ä–æ–∫—É
                if (depositDate && !isNaN(depositDate.getTime()) && depositDate.getFullYear() === selectedYear) {
                    const month = depositDate.getMonth(); // 0-11
                    const org = card.organization || '–ù–µ–≤—ñ–¥–æ–º–∞ –æ—Ä–≥–∞–Ω—ñ–∑–∞—Ü—ñ—è';
                    
                    // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ –æ—Ä–≥–∞–Ω—ñ–∑–∞—Ü—ñ—é
                    if (!organizationData[org]) {
                        organizationData[org] = Array(12).fill(0);
                    }
                    
                    // –î–æ–¥–∞—î–º–æ –∫–∞—Ä—Ç–∫—É
                    organizationData[org][month]++;
                    monthTotals[month]++;
                    grandTotal++;
                    
                    console.log(`‚úÖ –î–æ–¥–∞–Ω–æ: ${org} - ${depositDate.toLocaleDateString()} (–º—ñ—Å—è—Ü—å: ${month + 1})`);
                }
            });
            
            console.log('üéØ –ü—ñ–¥—Å—É–º–æ–∫ –æ–±—Ä–æ–±–∫–∏:', {
                organizationData,
                monthTotals,
                grandTotal
            });
            
            // –û—á–∏—â—É—î–º–æ —Ç–∞–±–ª–∏—Ü—é
            tbody.innerHTML = '';
            
            // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —î –¥–∞–Ω—ñ
            if (Object.keys(organizationData).length === 0) {
                tbody.innerHTML = `
                    <tr>
                        <td colspan="14" class="px-6 py-4 text-center text-yellow-600 bg-yellow-50">
                            –ù–µ–º–∞—î –¥–∞–Ω–∏—Ö –∞–∫—Ç–∏–≤–Ω–∏—Ö —Ä–∞—Ö—É–Ω–∫—ñ–≤ –∑–∞ ${selectedYear} —Ä—ñ–∫.
                            <br>–ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ, —á–∏ –¥–æ–¥–∞–Ω—ñ –¥–∞—Ç–∏ –ø–µ—Ä—à–æ–≥–æ –∑–∞—Ä–∞—Ö—É–≤–∞–Ω–Ω—è —É –∫–∞—Ä—Ç–∫–∏.
                        </td>
                    </tr>
                `;
                return;
            }
            
            // –°—Ç–≤–æ—Ä—é—î–º–æ —Ä—è–¥–∫–∏ –¥–ª—è –æ—Ä–≥–∞–Ω—ñ–∑–∞—Ü—ñ–π
            Object.keys(organizationData).sort().forEach(org => {
                const row = document.createElement('tr');
                row.className = 'hover:bg-gray-50';
                
                let rowTotal = 0;
                let rowHTML = `<td class="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900">${org}</td>`;
                
                // –î–æ–¥–∞—î–º–æ —Å—Ç–æ–≤–ø—Ü—ñ –º—ñ—Å—è—Ü—ñ–≤
                for (let month = 0; month < 12; month++) {
                    const count = organizationData[org][month] || 0;
                    rowTotal += count;
                    
                    rowHTML += `<td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900" style="text-align: center;">
                        ${count > 0 ? count : ''}
                    </td>`;
                }
                
                // –°—Ç–æ–≤–ø–µ—Ü—å "–í—Å—å–æ–≥–æ"
                rowHTML += `<td class="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900" style="text-align: center; bg-blue-50">
                    ${rowTotal > 0 ? rowTotal : ''}
                </td>`;
                
                row.innerHTML = rowHTML;
                tbody.appendChild(row);
            });
            
            // –û–Ω–æ–≤–ª—é—î–º–æ –ø—ñ–¥—Å—É–º–∫–∏
            for (let i = 1; i <= 12; i++) {
                const totalElement = document.getElementById(`activeMonth${i}`);
                if (totalElement) {
                    totalElement.textContent = monthTotals[i - 1] > 0 ? monthTotals[i - 1] : '';
                }
            }
            
            const grandTotalElement = document.getElementById('activeGrandTotal');
            if (grandTotalElement) {
                grandTotalElement.textContent = grandTotal > 0 ? grandTotal : '';
            }
            
            console.log('‚úÖ –ó–≤—ñ—Ç –∞–∫—Ç–∏–≤–Ω–∏—Ö —Ä–∞—Ö—É–Ω–∫—ñ–≤ –∑–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–æ —É—Å–ø—ñ—à–Ω–æ');
            
        } catch (error) {
            console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –∑–≤—ñ—Ç—É –∞–∫—Ç–∏–≤–Ω–∏—Ö —Ä–∞—Ö—É–Ω–∫—ñ–≤:', error);
            tbody.innerHTML = `
                <tr>
                    <td colspan="14" class="px-6 py-4 text-center text-red-600 bg-red-50">
                        –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö: ${error.message}
                    </td>
                </tr>
            `;
        }
    }

    async processActiveAccountsData(year) {
        const organizationData = {};
        
        try {
            console.log('üì• –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ —Å–≤—ñ–∂—ñ –¥–∞–Ω—ñ –∑ –±–∞–∑–∏ –¥–ª—è –∞–∫—Ç–∏–≤–Ω–∏—Ö —Ä–∞—Ö—É–Ω–∫—ñ–≤...');
            
            // –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ —Å–≤—ñ–∂—ñ –¥–∞–Ω—ñ –∑ –∞–∫—Ç–∏–≤–Ω–∏—Ö –∫–∞—Ä—Ç–æ–∫ —Ç–∞ –∞—Ä—Ö—ñ–≤—É
            const activeCards = await dataService.getCards();
            const archivedCards = await dataService.getArchivedCards();
            
            console.log('üìä –ê–∫—Ç–∏–≤–Ω–∏—Ö –∫–∞—Ä—Ç–æ–∫:', activeCards?.length || 0);
            console.log('üìä –ê—Ä—Ö—ñ–≤–Ω–∏—Ö –∫–∞—Ä—Ç–æ–∫:', archivedCards?.length || 0);
            
            // –û–±'—î–¥–Ω—É—î–º–æ –≤—Å—ñ –∫–∞—Ä—Ç–∫–∏
            const allCards = [...(activeCards || []), ...(archivedCards || [])];
            
            console.log(`üîç –û–±—Ä–æ–±–ª—è—î–º–æ ${allCards.length} –∫–∞—Ä—Ç–æ–∫ –¥–ª—è –∞–∫—Ç–∏–≤–Ω–∏—Ö —Ä–∞—Ö—É–Ω–∫—ñ–≤ —É —Ä–æ—Ü—ñ ${year}`);
            
            if (allCards.length > 0) {
                console.log('üìù –ü—Ä–∏–∫–ª–∞–¥ –∫–∞—Ä—Ç–∫–∏ –¥–ª—è –∞–∫—Ç–∏–≤–Ω–∏—Ö —Ä–∞—Ö—É–Ω–∫—ñ–≤:', allCards[0]);
            }
            
            allCards.forEach((card, index) => {
                // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Ä—ñ–∑–Ω—ñ –º–æ–∂–ª–∏–≤—ñ –ø–æ–ª—è –¥–∞—Ç –ø–µ—Ä—à–æ–≥–æ –∑–∞—Ä–∞—Ö—É–≤–∞–Ω–Ω—è
                let depositDate = null;
                let dateField = null;
                
                if (card.firstDepositDate) {
                    depositDate = new Date(card.firstDepositDate);
                    dateField = 'firstDepositDate';
                } else if (card.first_deposit_date) {
                    depositDate = new Date(card.first_deposit_date);
                    dateField = 'first_deposit_date';
                } else if (card.dateFirstDeposit) {
                    depositDate = new Date(card.dateFirstDeposit);
                    dateField = 'dateFirstDeposit';
                } else if (card.activationDate) {
                    depositDate = new Date(card.activationDate);
                    dateField = 'activationDate';
                }
                
                if (index < 5) {
                    console.log(`üìÖ –ö–∞—Ä—Ç–∫–∞ ${index + 1} –¥–ª—è –∞–∫—Ç–∏–≤–Ω–∏—Ö —Ä–∞—Ö—É–Ω–∫—ñ–≤:`, {
                        org: card.organization,
                        firstDepositDate: card.firstDepositDate,
                        first_deposit_date: card.first_deposit_date,
                        dateFirstDeposit: card.dateFirstDeposit,
                        activationDate: card.activationDate,
                        usedField: dateField,
                        parsedDate: depositDate,
                        year: depositDate ? depositDate.getFullYear() : null,
                        month: depositDate ? depositDate.getMonth() + 1 : null
                    });
                }
                
                // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –¥–∞—Ç–∞ –Ω–∞–ª–µ–∂–∏—Ç—å –¥–æ –≤–∏–±—Ä–∞–Ω–æ–≥–æ —Ä–æ–∫—É
                if (depositDate && !isNaN(depositDate.getTime()) && depositDate.getFullYear() === year) {
                    const month = depositDate.getMonth(); // 0-11
                    const org = card.organization || '–ù–µ–≤—ñ–¥–æ–º–∞ –æ—Ä–≥–∞–Ω—ñ–∑–∞—Ü—ñ—è';
                    
                    // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ –æ—Ä–≥–∞–Ω—ñ–∑–∞—Ü—ñ—é, —è–∫—â–æ —ó—ó —â–µ –Ω–µ–º–∞—î
                    if (!organizationData[org]) {
                        organizationData[org] = Array(12).fill(0);
                    }
                    
                    // –ó–±—ñ–ª—å—à—É—î–º–æ –ª—ñ—á–∏–ª—å–Ω–∏–∫ –¥–ª—è —Ü—å–æ–≥–æ –º—ñ—Å—è—Ü—è
                    organizationData[org][month]++;
                    
                    console.log(`‚úÖ –î–æ–¥–∞–Ω–æ –∞–∫—Ç–∏–≤–Ω–∏–π —Ä–∞—Ö—É–Ω–æ–∫: ${org} - ${depositDate.toLocaleDateString()} (–º—ñ—Å—è—Ü—å ${month + 1}, —ñ–Ω–¥–µ–∫—Å ${month})`);
                }
            });
            
            console.log('üéØ –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–æ–±–∫–∏ –∞–∫—Ç–∏–≤–Ω–∏—Ö —Ä–∞—Ö—É–Ω–∫—ñ–≤:', organizationData);
            
        } catch (error) {
            console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –¥–∞–Ω–∏—Ö –∞–∫—Ç–∏–≤–Ω–∏—Ö —Ä–∞—Ö—É–Ω–∫—ñ–≤:', error);
        }
        
        return organizationData;
    }

    addTestActiveRow(tbody, testData) {
        const row = document.createElement('tr');
        row.className = 'hover:bg-gray-50 bg-yellow-50';
        
        let rowHTML = `<td class="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900">${testData.org}</td>`;
        
        // –î–æ–¥–∞—î–º–æ –∫–æ–º—ñ—Ä–∫–∏ –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ –º—ñ—Å—è—Ü—è
        for (let month = 0; month < 12; month++) {
            const count = (month === testData.month) ? testData.count : 0;
            rowHTML += `<td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900" style="text-align: center;">
                ${count > 0 ? count : ''}
            </td>`;
        }
        
        // –î–æ–¥–∞—î–º–æ –∫–æ–ª–æ–Ω–∫—É "–í—Å—å–æ–≥–æ"
        rowHTML += `<td class="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900" style="text-align: center; bg-blue-50">
            ${testData.count}
        </td>`;
        
        row.innerHTML = rowHTML;
        tbody.appendChild(row);
    }

    getActiveAccountsData(year) {
        const monthNames = [
            '–°—ñ—á–µ–Ω—å', '–õ—é—Ç–∏–π', '–ë–µ—Ä–µ–∑–µ–Ω—å', '–ö–≤—ñ—Ç–µ–Ω—å', '–¢—Ä–∞–≤–µ–Ω—å', '–ß–µ—Ä–≤–µ–Ω—å',
            '–õ–∏–ø–µ–Ω—å', '–°–µ—Ä–ø–µ–Ω—å', '–í–µ—Ä–µ—Å–µ–Ω—å', '–ñ–æ–≤—Ç–µ–Ω—å', '–õ–∏—Å—Ç–æ–ø–∞–¥', '–ì—Ä—É–¥–µ–Ω—å'
        ];

        const data = {};
        
        this.allCards
            .filter(card => 
                card.firstDepositDate && 
                new Date(card.firstDepositDate).getFullYear() === year
            )
            .forEach(card => {
                const month = new Date(card.firstDepositDate).getMonth();
                const monthName = monthNames[month];
                const org = card.organization;
                
                const key = `${monthName}-${org}`;
                if (!data[key]) {
                    data[key] = {
                        month: monthName,
                        organization: org,
                        count: 0
                    };
                }
                data[key].count++;
            });

        return Object.values(data).sort((a, b) => {
            const monthA = monthNames.indexOf(a.month);
            const monthB = monthNames.indexOf(b.month);
            if (monthA !== monthB) return monthA - monthB;
            return a.organization.localeCompare(b.organization);
        });
    }

    async generateStatusReport() {
        console.log('üîÑ –ì–µ–Ω–µ—Ä—É—î–º–æ –ø—Ä–æ—Å—Ç–∏–π –∑–≤—ñ—Ç —Å—Ç–∞—Ç—É—Å—É —Ä–∞—Ö—É–Ω–∫—ñ–≤...');
        
        const tbody = document.getElementById('statusTableBody');
        if (!tbody) return;

        try {
            // –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –¥–∞–Ω—ñ
            const activeCards = await dataService.getCards();
            const archivedCards = await dataService.getArchivedCards();
            const allCards = [...(activeCards || []), ...(archivedCards || [])];
            
            // –ì—Ä—É–ø—É—î–º–æ –ø–æ –æ—Ä–≥–∞–Ω—ñ–∑–∞—Ü—ñ—è—Ö
            const orgData = {};
            
            allCards.forEach(card => {
                const org = card.organization || '–ù–µ –≤–∫–∞–∑–∞–Ω–æ';
                
                if (!orgData[org]) {
                    orgData[org] = { active: 0, pending: 0, total: 0 };
                }
                
                if (card.accountStatus === '–ê–∫—Ç–∏–≤–Ω–∏–π') {
                    orgData[org].active++;
                } else if (card.accountStatus === '–û—á—ñ–∫—É—î –∞–∫—Ç–∏–≤–∞—Ü—ñ—é') {
                    orgData[org].pending++;
                }
                
                orgData[org].total++;
            });
            
            // –û—á–∏—â—É—î–º–æ —Ç–∞–±–ª–∏—Ü—é
            tbody.innerHTML = '';
            
            // –°—Ç–≤–æ—Ä—é—î–º–æ —Ä—è–¥–∫–∏
            let totalActive = 0;
            let totalPending = 0;
            let grandTotal = 0;
            
            Object.keys(orgData).sort().forEach(org => {
                const data = orgData[org];
                
                const row = document.createElement('tr');
                row.className = 'hover:bg-gray-50';
                
                row.innerHTML = `
                    <td class="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900">${org}</td>
                    <td class="px-6 py-4 whitespace-nowrap text-sm text-green-600" style="text-align: center;">${data.active}</td>
                    <td class="px-6 py-4 whitespace-nowrap text-sm text-yellow-600" style="text-align: center;">${data.pending}</td>
                    <td class="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900 bg-blue-50" style="text-align: center;">${data.total}</td>
                `;
                
                tbody.appendChild(row);
                
                totalActive += data.active;
                totalPending += data.pending;
                grandTotal += data.total;
            });
            
            // –û–Ω–æ–≤–ª—é—î–º–æ –ø—ñ–¥—Å—É–º–∫–∏
            document.getElementById('statusTotalActive').textContent = totalActive;
            document.getElementById('statusTotalPending').textContent = totalPending;  
            document.getElementById('statusGrandTotal').textContent = grandTotal;
            
            console.log('‚úÖ –ü—Ä–æ—Å—Ç–∏–π –∑–≤—ñ—Ç —Å—Ç–∞—Ç—É—Å—É –∑–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–æ');
            
        } catch (error) {
            console.error('‚ùå –ü–æ–º–∏–ª–∫–∞:', error);
            tbody.innerHTML = `
                <tr>
                    <td colspan="4" class="px-6 py-4 text-center text-red-600">
                        –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è: ${error.message}
                    </td>
                </tr>
            `;
        }
    }

}

// –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ –∑–≤—ñ—Ç—ñ–≤ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ —Å—Ç–æ—Ä—ñ–Ω–∫–∏
let reportGenerator;
document.addEventListener('DOMContentLoaded', () => {
    // –ß–µ–∫–∞—î–º–æ —Ç—Ä–æ—Ö–∏, —â–æ–± –≤—Å—ñ —Å–∫—Ä–∏–ø—Ç–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–∏–ª–∏—Å—å
    setTimeout(() => {
        reportGenerator = new ReportGenerator();
    }, 200);
});
